//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections;
using System.Data.Entity.ModelConfiguration.Configuration;
using System.Web.Configuration;
using System.Xml.Linq;
using Antlr.Runtime.Tree;
using System.Configuration;
using System.Web.Mvc;


namespace DatabaseManagement
{ 
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using VacationManagement;
    using System.Data.SqlClient;
    using GUIManagement;

    public class DBQuery
    {
        private readonly string sqlConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
        public const string SUBMITTED = "offen";
        public const string AGREED = "zugestimmt";
        public const string PERMITTED = "befürwortet";
        public const string APPROVED = "genehmigt";
        public const string REJECTED_BY_DEPUTY = "abgelehnt durch Schichtpartner";
        public const string REJECTED_BY_DIVISION_MANAGER = "abgelehnt durch Bereichsleiter";
        public const string CANCELED = "storniert";
        public const string TAKEN = "genommen";



        public string getConectionString()
        {
            return sqlConnectionString;
        }
        /// <summary>
        /// selects a number of all Holidays between the VacationRequest' StartDate and EndDate that are workdays and not a Saturday/Sunday 
        /// </summary>
        /// <param name="VacationRequest">VacationRequest of the Employee in the VacationRequest</param>
        /// <returns>int number of selected Holidays</returns>
        public int SelectHolidays(VacationRequest VacationRequest)
        {
            int intdays = 0;  // return value

            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement = "SELECT Count(*) AS 'DayCount' FROM dbo.Calendar WHERE (Date BETWEEN @VacationStartDate AND @VacationEndDate) AND DayType IN ('Feiertag', 'Betriebsruhetag') AND Weekday NOT IN ('Samstag','Sonntag')";

                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("VacationStartDate", VacationRequest.getVacationStartDate());
                    cmd.Parameters.AddWithValue("VacationEndDate", VacationRequest.getVacationEndDate());
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {

                                // To avoid unexpected bugs access columns by name.
                             intdays = reader.GetInt32(reader.GetOrdinal("DayCount"));  
                            }
                        }
                                                                      
                    }

                }
            }
            return intdays;
        }

        /// <summary>
        /// selects the Shiftpartner of the Employee in the VacationRequest
        /// </summary>
        /// <param name="VacationRequest">VacationRequest of the Employee</param>
        /// <returns>string with ShiftpartnerID</returns>
        public string SelectDeputy(VacationRequest VacationRequest)
        {
            string Id = "null";
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement = "SELECT Id FROM dbo.AspNetUsers WHERE ShiftGroupID = (SELECT ShiftGroupID FROM dbo.AspNetUsers WHERE Id = @EmployeeID) AND Id != @EmployeeID";
                
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", VacationRequest.getEmployeeID());
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {

                                // To avoid unexpected bugs access columns by name.
                                Id = reader.GetString(reader.GetOrdinal("Id"));
                            }
                        }
                    }
                }
            }
            return Id;
        }

        /// <summary>
        /// selects all VacationTimePeriods of defined employeeID (VacationStartDates and VacationEndDates), 
        /// e.g. shift partner's vacation time periods that are in the same time period like the requested VacationTimePeriod
        /// sortiert nach Startdatum
        /// </summary>
        /// <param name="VacationRequest">VacationRequest of the Employee</param>
        /// <param name="EmployeeID">EmployeeID of the specific Employee </param>
        /// <returns>List with (empty/ one Tuple/ many Tuples) and VacationStartDate, VacationEndDate inside every Tuple</returns>
        public List<Tuple<ulong, DateTime, DateTime>> SelectEmployeeVacationRequestInTimePeriod(VacationRequest VacationRequest, string EmployeeID)
        {
            var timelist = new List<Tuple<ulong, DateTime, DateTime>>();
            ulong VacationRequestIDtmp = 0UL;
            DateTime StartTmp = new DateTime();
            DateTime EndTmp = new DateTime();
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT VacationRequestID, VacationStartDate, VacationEndDate FROM VacationRequest WHERE EmployeeID = @EmployeeID AND ((@VacationStartDate BETWEEN VacationStartDate AND VacationEndDate) OR (@VacationEndDate BETWEEN VacationStartDate AND VacationEndDate)) order by VacationStartDate";

                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    cmd.Parameters.AddWithValue("VacationStartDate", VacationRequest.getVacationStartDate());
                    cmd.Parameters.AddWithValue("VacationEndDate", VacationRequest.getVacationEndDate());
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Returns into temp variables and insert them into the list
                                VacationRequestIDtmp = (ulong)reader.GetInt64(reader.GetOrdinal("VacationRequestID"));
                                StartTmp = reader.GetDateTime(reader.GetOrdinal("VacationStartDate"));
                                EndTmp = reader.GetDateTime(reader.GetOrdinal("VacationEndDate"));
                                timelist.Add(Tuple.Create(VacationRequestIDtmp,StartTmp, EndTmp));
                            }
                        }

                    }

                }
            }
            return timelist;
        }

        /// <summary>
        /// selects all LockPeriods with StartDate and EndDate within the VacationPeriod of VacationRequest
        /// sortiert nach Startdatum
        /// </summary>
        /// <param name="VacationRequest">VacationRequest of the Employee</param>
        /// <returns>List that contains (0/one/many) Tuples, every Tuple contains 2 DateTime (Start, End of LockPeriod)</returns>
        public List<Tuple<DateTime, DateTime>> SelectLockPeriods(VacationRequest VacationRequest)
        {
            var locklist = new List<Tuple<DateTime, DateTime>>();
            DateTime StartlockTmp = new DateTime();
            DateTime EndlockTmp = new DateTime();
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT LockPeriodStartDate, LockPeriodEndDate FROM dbo.VacationLockPeriod WHERE (@VacationStartDate BETWEEN LockPeriodStartDate AND LockPeriodEndDate) OR (@VacationEndDate BETWEEN LockPeriodStartDate AND LockPeriodEndDate) order by LockPeriodStartDate";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("VacationStartDate", VacationRequest.getVacationStartDate());
                    cmd.Parameters.AddWithValue("VacationEndDate", VacationRequest.getVacationEndDate());
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Returns into temp variables and insert them into the list
                                StartlockTmp = reader.GetDateTime(reader.GetOrdinal("LockPeriodStartDate"));
                                EndlockTmp = reader.GetDateTime(reader.GetOrdinal("LockPeriodEndDate"));
                                locklist.Add(Tuple.Create(StartlockTmp, EndlockTmp));
                            }
                        }

                    }

                }
            }
            return locklist;
        }

        /// <summary>
        /// select remaining VacationDays for Employee, these are total days for this year + days of the previous year
        /// </summary>
        /// <param name="EmployeeID">EmployeeID</param>
        /// <returns>number of remainingV acationDays</returns>
        public int SelectRemainingVacationDays(string EmployeeID)
        {
            int RemainingDays = 0;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
            string sqlStatement =
                    "SELECT VacationDayRemaining FROM dbo.VacationEntitlement WHERE EmployeeID = @EmployeeID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into variable
                                RemainingDays = reader.GetInt32(reader.GetOrdinal("VacationDayRemaining"));
                            }
                        }

                    }

                }
            }
            return RemainingDays;
        }

        /// <summary>
        /// inserts a new VacationRequest into the DB
        /// </summary>
        /// <param name="VacationRequest">VacationRequest of Employee</param>
        /// <returns>true or false (successfull or not)</returns>
        public Boolean InsertNewVacationRequest(VacationRequest VacationRequest)
        {
            bool Result = false;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =                        
                    "INSERT INTO [dbo].[VacationRequest] VALUES (@VacationRequestID, @VacationStartDate, @VacationEndDate, @SubmissionDate, @VacationType, @VacationProcessingState, @ModificationDate, @VacationPeriodOverlapNote, @VacationLockPeriodNote,@NetVacationDays, @EmployeeID)";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("VacationRequestID", (long)VacationRequest.getVacationRequestID());
                    cmd.Parameters.AddWithValue("VacationStartDate", VacationRequest.getVacationStartDate());
                    cmd.Parameters.AddWithValue("VacationEndDate", VacationRequest.getVacationEndDate());
                    cmd.Parameters.AddWithValue("SubmissionDate", VacationRequest.getSubmissionDate());
                    cmd.Parameters.AddWithValue("VacationType", VacationRequest.getVacationType());
                    cmd.Parameters.AddWithValue("VacationProcessingState",
                        ConvertVacationRequestProcessingStateToString(VacationRequest.getVacationRequestProcessingState()));
                    cmd.Parameters.AddWithValue("ModificationDate", VacationRequest.getModificationDate());
                    cmd.Parameters.AddWithValue("VacationPeriodOverlapNote",
                        VacationRequest.getVacationPeriodOverlapNote());
                    cmd.Parameters.AddWithValue("VacationLockPeriodNote", VacationRequest.getVacationLockPeriodNote());
                    cmd.Parameters.AddWithValue("EmployeeID", VacationRequest.getEmployeeID());
                    cmd.Parameters.AddWithValue("NetVacationDays", VacationRequest.getNetVacationDays());

                    try
                    {
                        connection.Open();
                        cmd.ExecuteNonQuery();//insert/delete/update is nonQuery
                        Result = true;
                    }
                    catch (SqlException e) //if Failure in Database then Result = false
                    {
                        {
                            Result = false;
                        }
                    }
                }
            }
            return Result;
        }

        /// <summary>
        /// selects information of the DivisionManager for the given EmployeeID
        /// </summary>
        /// <param name="EmployeeID">EmployeeID of the logged-in Employee</param>
        /// <returns>Employee Object filled with information(Id, Username, Passwordhash, Firstname, Lastname, Email, ShiftgroupID, DivisionID) about DivisionManager</returns>
        public Employee SelectDivisionManager(string EmployeeID)
        {
            string Idtmp = "c";
            string Usernametmp = "c";
            string PasswordHashtmp = "c";
            string FirstNametmp = "c";
            string LastNametmp = "c";
            string Emailtmp = "c";
            int ShiftGroupIDtmp = 0;
            int DivisionIDtmp = 0;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                        "SELECT Id, Username, PasswordHash, LastName, FirstName, Email, ShiftGroupID, DivisionID FROM dbo.AspNetUsers WHERE Id =" +
                        "(SELECT DivisionManagerID FROM dbo.Division WHERE DivisionID = (SELECT DivisionID FROM dbo.AspNetUsers WHERE Id = @EmployeeID))";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into variables
                                // wihout Role and StaffID
                                Idtmp = reader.GetString(reader.GetOrdinal("Id"));
                                Usernametmp = reader.GetString(reader.GetOrdinal("Username"));
                                PasswordHashtmp = reader.GetString(reader.GetOrdinal("PasswordHash"));
                                FirstNametmp = reader.GetString(reader.GetOrdinal("FirstName"));
                                LastNametmp = reader.GetString(reader.GetOrdinal("LastName"));
                                Emailtmp = reader.GetString(reader.GetOrdinal("Email"));
                                if (reader.IsDBNull(reader.GetOrdinal("ShiftGroupID"))) //if ID NULL, then ID = 0, no Shiftgroup 0 in database
                                {
                                    ShiftGroupIDtmp = 0;// 0 means, no Shiftgroup for that Employee
                                }
                                else
                                {
                                    ShiftGroupIDtmp = reader.GetInt32(reader.GetOrdinal("ShiftGroupID"));
                                }
                                DivisionIDtmp = reader.GetInt32(reader.GetOrdinal("DivisionID"));
                              }
                        }

                    }

                } 
            }
            Employee DivisionManager = new Employee(Idtmp, Usernametmp, PasswordHashtmp, FirstNametmp,
                LastNametmp, Emailtmp, ShiftGroupIDtmp, DivisionIDtmp);
           return DivisionManager;
        }

        // IN parameter is EmployeeID of Requester, OUT parameter is Employee "shiftpartner"
        /// <summary>
        /// select the information for the shiftpartner of logged-in Employee
        /// </summary>
        /// <param name="EmployeeID">EmployeeID of logged-in Employee</param>
        /// <returns>object Employee with information about shiftpartner (id, username, passwordhash, firstname, lastname, email, shiftgroupid)</returns>
        public Employee SelectDeputy(string EmployeeID)
        {
            string Idtmp = "c";
            string Usernametmp = "c";
            string PasswordHashtmp = "c";
            string FirstNametmp = "c";
            string LastNametmp = "c";
            string Emailtmp = "c";
            int ShiftGroupIDtmp = 0;
            int DivisionIDtmp = 0;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT Id, Username, PasswordHash, LastName, FirstName, Email, ShiftGroupID, DivisionID FROM dbo.AspNetUsers WHERE ShiftGroupID = (SELECT ShiftGroupID FROM dbo.AspNetUsers WHERE Id = @EmployeeID) AND Id != @EmployeeID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into variables
                                // wihout Role and StaffID
                                Idtmp = reader.GetString(reader.GetOrdinal("Id"));
                                Usernametmp = reader.GetString(reader.GetOrdinal("Username"));
                                PasswordHashtmp = reader.GetString(reader.GetOrdinal("PasswordHash"));
                                FirstNametmp = reader.GetString(reader.GetOrdinal("FirstName"));
                                LastNametmp = reader.GetString(reader.GetOrdinal("LastName"));
                                Emailtmp = reader.GetString(reader.GetOrdinal("Email"));
                                if (reader.IsDBNull(reader.GetOrdinal("ShiftGroupID"))) //if ID NULL, then ID = 0, no Shiftgroup 0 in database
                                {
                                    ShiftGroupIDtmp = 0; // 0 means, no Shiftgroup for that Employee
                                }
                                else
                                {
                                    ShiftGroupIDtmp = reader.GetInt32(reader.GetOrdinal("ShiftGroupID"));
                                }
                                DivisionIDtmp = reader.GetInt32(reader.GetOrdinal("DivisionID"));
                            }
                        }

                    }

                }
            }
            Employee Deputy = new Employee(Idtmp, Usernametmp, PasswordHashtmp, FirstNametmp,
                LastNametmp, Emailtmp, ShiftGroupIDtmp, DivisionIDtmp);
            return Deputy;
        }

        /// <summary>
        /// selects all VacationRequests of the given EmployeeID
        /// sortiert nach Startdatum
        /// </summary>
        /// <param name="EmployeeID">EmployeeID</param>
        /// <returns>List that contain all VacationRequest-Objects</returns>
        public List<VacationRequest> SelectAllVacationRequestsOfEmployee(string EmployeeID)
        {
            ulong VacationRequestIDtmp = 0UL;
            DateTime VacationStartDatetmp = new DateTime(2000,1,1);
            DateTime VacationEndDatetmp = new DateTime(2000,1,1);
            DateTime SubmissionDatetmp = new DateTime(2000,1,1);
            VacationRequestProcessingState VacationProcessingStatetmp = 0;
            string VacationTypetmp = "c";
            DateTime ModificationDatetmp = new DateTime(2000,1,1);
            Boolean VacationOverlapNotetmp = false;
            Boolean VacationLockPeriodNotetmp = false;
            string EmployeeIDtmp = "c";
            int NetVacationDays = 0;

            var VacList = new List<VacationRequest>();
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT * FROM dbo.VacationRequest WHERE EmployeeID = @EmployeeID order by VacationStartDate";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Returns into temp variables and insert them into the list

                                VacationRequestIDtmp = (ulong)reader.GetInt64(reader.GetOrdinal("VacationRequestID"));
                                VacationStartDatetmp = reader.GetDateTime(reader.GetOrdinal("VacationStartDate"));
                                VacationEndDatetmp = reader.GetDateTime(reader.GetOrdinal("VacationEndDate"));
                                SubmissionDatetmp = reader.GetDateTime(reader.GetOrdinal("SubmissionDate"));
                                VacationTypetmp = reader.GetString(reader.GetOrdinal("VacationType"));
                                VacationProcessingStatetmp = ConvertStringToVacationRequestProcessingState(reader.GetString(reader.GetOrdinal("VacationProcessingState")));
                                ModificationDatetmp = reader.GetDateTime(reader.GetOrdinal("ModificationDate"));
                                VacationOverlapNotetmp = reader.GetBoolean(reader.GetOrdinal("VacationPeriodOverlapNote"));
                                VacationLockPeriodNotetmp = reader.GetBoolean(reader.GetOrdinal("VacationLockPeriodNote"));
                                EmployeeIDtmp = reader.GetString(reader.GetOrdinal("EmployeeID"));
                                NetVacationDays = reader.GetInt32(reader.GetOrdinal("NetVacationDays"));

                                VacationRequest Vac = new VacationRequest(VacationRequestIDtmp, EmployeeIDtmp, VacationStartDatetmp,
                                    VacationEndDatetmp, SubmissionDatetmp, VacationTypetmp, VacationProcessingStatetmp,
                                    ModificationDatetmp, VacationOverlapNotetmp, VacationLockPeriodNotetmp, NetVacationDays);
                                VacList.Add(Vac);
                            }
                        }
                    }
                }
            }
            return VacList;
        }

        /// <summary>
        /// selects all VacationRequests of one Division
        /// </summary>
        /// <param name="DivisionID">ID of Division</param>
        /// <returns>returns a list of all vacationrequests</returns>
        public List<VacationRequest> SelectAllVacationRequestsOfDivision (int DivisionID)
        {
            ulong VacationRequestIDtmp = 0UL;
            DateTime VacationStartDatetmp = new DateTime(2000, 1, 1);
            DateTime VacationEndDatetmp = new DateTime(2000, 1, 1);
            DateTime SubmissionDatetmp = new DateTime(2000, 1, 1);
            VacationRequestProcessingState VacationProcessingStatetmp = 0;
            string VacationTypetmp = "c";
            DateTime ModificationDatetmp = new DateTime(2000, 1, 1);
            Boolean VacationOverlapNotetmp = false;
            Boolean VacationLockPeriodNotetmp = false;
            string EmployeeIDtmp = "c";
            int NetVacationDays = 0;

            var VacList = new List<VacationRequest>();
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT * FROM dbo.VacationRequest WHERE EmployeeID IN (SELECT Id FROM AspNetUsers WHERE DivisionID = @DivisionID) order by VacationStartDate";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("DivisionID", DivisionID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Returns into temp variables and insert them into the list

                                VacationRequestIDtmp = (ulong)reader.GetInt64(reader.GetOrdinal("VacationRequestID"));
                                VacationStartDatetmp = reader.GetDateTime(reader.GetOrdinal("VacationStartDate"));
                                VacationEndDatetmp = reader.GetDateTime(reader.GetOrdinal("VacationEndDate"));
                                SubmissionDatetmp = reader.GetDateTime(reader.GetOrdinal("SubmissionDate"));
                                VacationTypetmp = reader.GetString(reader.GetOrdinal("VacationType"));
                                VacationProcessingStatetmp = ConvertStringToVacationRequestProcessingState(reader.GetString(reader.GetOrdinal("VacationProcessingState")));
                                ModificationDatetmp = reader.GetDateTime(reader.GetOrdinal("ModificationDate"));
                                VacationOverlapNotetmp = reader.GetBoolean(reader.GetOrdinal("VacationPeriodOverlapNote"));
                                VacationLockPeriodNotetmp = reader.GetBoolean(reader.GetOrdinal("VacationLockPeriodNote"));
                                EmployeeIDtmp = reader.GetString(reader.GetOrdinal("EmployeeID"));
                                NetVacationDays = reader.GetInt32(reader.GetOrdinal("NetVacationDays"));

                                VacationRequest Vac = new VacationRequest(VacationRequestIDtmp, EmployeeIDtmp, VacationStartDatetmp,
                                    VacationEndDatetmp, SubmissionDatetmp, VacationTypetmp, VacationProcessingStatetmp,
                                    ModificationDatetmp, VacationOverlapNotetmp, VacationLockPeriodNotetmp, NetVacationDays);
                                VacList.Add(Vac);
                            }
                        }
                    }
                }
            }
            return VacList;
        }

 
        public DBQuery()
        {
        }

        /// <summary>
        /// updates the State of the VacationRequest with the given VacationRequestID
        /// </summary>
        /// <param name="VacationRequestID">ID of the VacationRequest in which the state will be changed</param>
        /// <param name="State">the to-be VacationProcessingState</param>
        /// <param name="modificationDate">Dateime of modification</param>
        /// <returns>true or false (update successfull or not)</returns>
        public Boolean UpdateVacationRequestStatus(ulong VacationRequestID, VacationRequestProcessingState State, DateTime modificationDate ) // geändert
        {
            bool Result = false;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =                                                                                                       //insert ID like that because of DataType conflicts
                    "UPDATE dbo.VacationRequest SET VacationProcessingState = @VacationProcessingState, ModificationDate = @modificationDate WHERE VacationRequestID = @VacationRequestID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("VacationRequestID", (long) VacationRequestID);
                    cmd.Parameters.AddWithValue("VacationProcessingState", ConvertVacationRequestProcessingStateToString(State));
                    cmd.Parameters.AddWithValue("modificationDate", modificationDate);
                    
                    try
                    {
                        connection.Open();
                        cmd.ExecuteNonQuery(); //insert,delete,update is NonQuery
                        Result = true;
                    }
                    catch (SqlException e) //if failure in Database result = false
                    {
                        {
                            Result = false;
                        }
                    }
                }
            }
            return Result;
        }

        /// <summary>
        /// Set NetVacationDays of a cancelled VacationRequest to Zero
        /// </summary>
        /// <param name="VacationRequestID"> ID of the Vacation Request to be cancelled</param>
        /// <param name="value"></param>
        /// <returns>TRUE if update was successful, else FALSE</returns>
        public Boolean UpdateNetVacationDays(ulong VacationRequestID, int value)
        {
            Boolean Result = false;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =                                                                                                       //insert ID like that because of DataType conflicts
                    "UPDATE dbo.VacationRequest SET NetVacationDays = @NetVacationDays WHERE VacationRequestID = @VacationRequestID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("VacationRequestID", (long)VacationRequestID);
                    cmd.Parameters.AddWithValue("NetVacationDays", value);
                 
                    try
                    {
                        connection.Open();
                        cmd.ExecuteNonQuery(); //insert,delete,update is NonQuery
                        Result = true;
                    }
                    catch (SqlException e) //if failure in Database result = false
                    {
                        {
                            Result = false;
                        }
                    }
                }
            }
            return Result;
        }

        /// <summary>
        /// select the shiftpartner of the given Employee
        /// </summary>
        /// <param name="EmployeeID">EmployeeID of</param>
        /// <returns>string of the shiftpartner</returns>
        public String SelectShiftPartner(string EmployeeID)
        {
            string ShiftPartnerID = "null";
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                        "SELECT Id FROM dbo.AspNetUsers WHERE ShiftGroupID = (SELECT ShiftGroupID FROM dbo.AspNetUsers WHERE Id = @EmployeeID) AND Id != @EmployeeID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into variable
                                ShiftPartnerID = reader.GetString(reader.GetOrdinal("Id"));
                            }
                        }
                        else
                        {
                            ShiftPartnerID = null;
                        }
                    }
                }
            }
            return ShiftPartnerID;
        }

        /// <summary>
        /// selects the Employee of an VacationRequest
        /// </summary>
        /// <param name="VacationRequestID">ID of the VacationRequest</param>
        /// <returns>EmployeeID of the VacationRequest owner</returns>
        public Employee SelectRequester(ulong VacationRequestID)
        {
            string Idtmp = "c";
            string Usernametmp = "c";
            string PasswordHashtmp = "c";
            string FirstNametmp = "c";
            string LastNametmp = "c";
            string Emailtmp = "c";
            int ShiftGroupIDtmp = 0;
            int DivisionIDtmp = 0;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
               string sqlStatement =
                    "SELECT Id, Username, PasswordHash, LastName, FirstName, Email, ShiftGroupID, DivisionID FROM dbo.AspNetUsers WHERE Id = (SELECT EmployeeID FROM dbo.VacationRequest WHERE VacationRequestID = @VacationRequestID)";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("VacationRequestID", (long)VacationRequestID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into variables
                                // wihout Role and StaffID
                                Idtmp = reader.GetString(reader.GetOrdinal("Id"));
                                Usernametmp = reader.GetString(reader.GetOrdinal("Username"));
                                PasswordHashtmp = reader.GetString(reader.GetOrdinal("PasswordHash"));
                                FirstNametmp = reader.GetString(reader.GetOrdinal("FirstName"));
                                LastNametmp = reader.GetString(reader.GetOrdinal("LastName"));
                                Emailtmp = reader.GetString(reader.GetOrdinal("Email"));
                                if (reader.IsDBNull(reader.GetOrdinal("ShiftGroupID"))) //if ID NULL, then ID = 0, no Shiftgroup 0 in database
                                {
                                    ShiftGroupIDtmp = 0; // 0 means, no Shiftgroup for that Employee
                                }
                                else
                                {
                                    ShiftGroupIDtmp = reader.GetInt32(reader.GetOrdinal("ShiftGroupID"));
                                }
                                DivisionIDtmp = reader.GetInt32(reader.GetOrdinal("DivisionID"));
                            }
                        }

                    }

                }
            }
            Employee Requester = new Employee(Idtmp, Usernametmp, PasswordHashtmp, FirstNametmp,
                LastNametmp, Emailtmp, ShiftGroupIDtmp, DivisionIDtmp);
            return Requester;
        }

        /// <summary>
        /// selects all VacationRequests of the Shiftpartner that are submitted
        /// sortiert nach Startdatum
        /// </summary>
        /// <param name="EmployeeID">EmployeeID of Shift Partner</param>
        /// <returns>List that contains Vacation Requests of ShiftPartner with state "submitted" only</returns>
        public List<VacationRequest> SelectSubmittedVacationRequestsOfShiftPartner(string EmployeeID)
        {
            ulong VacationRequestIDtmp = 0UL;
            DateTime VacationStartDatetmp = new DateTime(2000, 1, 1);
            DateTime VacationEndDatetmp = new DateTime(2000, 1, 1);
            DateTime SubmissionDatetmp = new DateTime(2000, 1, 1);
            VacationRequestProcessingState VacationProcessingStatetmp = 0;
            string VacationTypetmp = "c";
            DateTime ModificationDatetmp = new DateTime(2000, 1, 1);
            Boolean VacationOverlapNotetmp = false;
            Boolean VacationLockPeriodNotetmp = false;
            string EmployeeIDtmp = "c";
            int NetVacationDays = 0;

            var VacList = new List<VacationRequest>();
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT * FROM dbo.VacationRequest WHERE EmployeeID = @EmployeeID AND VacationProcessingState = 'offen' order by VacationStartDate";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Returns into temp variables and insert them into the list

                                VacationRequestIDtmp = (ulong)reader.GetInt64(reader.GetOrdinal("VacationRequestID"));
                                VacationStartDatetmp = reader.GetDateTime(reader.GetOrdinal("VacationStartDate"));
                                VacationEndDatetmp = reader.GetDateTime(reader.GetOrdinal("VacationEndDate"));
                                SubmissionDatetmp = reader.GetDateTime(reader.GetOrdinal("SubmissionDate"));
                                VacationTypetmp = reader.GetString(reader.GetOrdinal("VacationType"));
                                VacationProcessingStatetmp = ConvertStringToVacationRequestProcessingState(reader.GetString(reader.GetOrdinal("VacationProcessingState")));
                                ModificationDatetmp = reader.GetDateTime(reader.GetOrdinal("ModificationDate"));
                                VacationOverlapNotetmp = reader.GetBoolean(reader.GetOrdinal("VacationPeriodOverlapNote"));
                                VacationLockPeriodNotetmp = reader.GetBoolean(reader.GetOrdinal("VacationLockPeriodNote"));
                                EmployeeIDtmp = reader.GetString(reader.GetOrdinal("EmployeeID"));
                                NetVacationDays = reader.GetInt32(reader.GetOrdinal("NetVacationDays"));

                                VacationRequest Vac = new VacationRequest(VacationRequestIDtmp, EmployeeIDtmp, VacationStartDatetmp,
                                    VacationEndDatetmp, SubmissionDatetmp, VacationTypetmp, VacationProcessingStatetmp,
                                    ModificationDatetmp, VacationOverlapNotetmp, VacationLockPeriodNotetmp, NetVacationDays);
                                VacList.Add(Vac);
                            }
                        }
                    }
                }
            }
            return VacList;
        }

        /// <summary>
        /// This method can only be accessed by a person with role Division Manager in EULE
        /// </summary>
        /// <param name="EmployeeID">EmployeeID of person with role = Division Manager</param>
        /// <returns>List that contains all Employees that are in the Division Managers Division</returns>
        public List<Employee> SelectEmployeesOfDivision(string EmployeeID)
        {
            string Idtmp = "c";
            string Usernametmp = "c";
            string PasswordHashtmp = "c";
            string FirstNametmp = "c";
            string LastNametmp = "c";
            string Emailtmp = "c";
            string role = "";
            int ShiftGroupIDtmp = 0;
            int DivisionIDtmp = 0;

            var EmpList = new List<Employee>();
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT * FROM dbo.AspNetUsers WHERE DivisionID = (SELECT DivisionID FROM dbo.AspNetUsers WHERE Id = @EmployeeID)";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into variables
                                // wihout Role and StaffID
                                Idtmp = reader.GetString(reader.GetOrdinal("Id"));
                                Usernametmp = reader.GetString(reader.GetOrdinal("Username"));
                                PasswordHashtmp = reader.GetString(reader.GetOrdinal("PasswordHash"));
                                FirstNametmp = reader.GetString(reader.GetOrdinal("FirstName"));
                                LastNametmp = reader.GetString(reader.GetOrdinal("LastName"));
                                Emailtmp = reader.GetString(reader.GetOrdinal("Email"));

                                role = SelectRole(Idtmp);

                                if (reader.IsDBNull(reader.GetOrdinal("ShiftGroupID"))) //Test, ob ID NULL, wenn ja ID = 0
                                {
                                    ShiftGroupIDtmp = 0;
                                }else
                                {
                                    ShiftGroupIDtmp = reader.GetInt32(reader.GetOrdinal("ShiftGroupID"));
                                }
                                DivisionIDtmp = reader.GetInt32(reader.GetOrdinal("DivisionID"));
                                Employee DivEmployee = new Employee(Idtmp,Usernametmp,PasswordHashtmp,FirstNametmp,LastNametmp,Emailtmp,ShiftGroupIDtmp,DivisionIDtmp);
                                DivEmployee.Role = role;
                                EmpList.Add(DivEmployee);
                            }
                        }

                    }

                }
            }
            return EmpList;
        }


        public List<Employee> SelectAllEmployees()
        {
            string Idtmp = "";
            string Usernametmp = "";
            string PasswordHashtmp = "";
            string FirstNametmp = "";
            string LastNametmp = "";
            string Emailtmp = "";
            int ShiftGroupIDtmp = 0;
            int DivisionIDtmp = 0;
            var empList = new List<Employee>();
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT * FROM dbo.AspNetUsers";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into variables
                                // wihout Role and StaffID
                                Idtmp = reader.GetString(reader.GetOrdinal("Id"));
                                Usernametmp = reader.GetString(reader.GetOrdinal("Username"));
                                PasswordHashtmp = reader.GetString(reader.GetOrdinal("PasswordHash"));
                                FirstNametmp = reader.GetString(reader.GetOrdinal("FirstName"));
                                LastNametmp = reader.GetString(reader.GetOrdinal("LastName"));
                                Emailtmp = reader.GetString(reader.GetOrdinal("Email"));
                                if (reader.IsDBNull(reader.GetOrdinal("ShiftGroupID")))
                                    //Test, ob ID NULL, wenn ja ID = 0
                                {
                                    ShiftGroupIDtmp = 0;
                                }
                                else
                                {
                                    ShiftGroupIDtmp = reader.GetInt32(reader.GetOrdinal("ShiftGroupID"));
                                }
                                DivisionIDtmp = reader.GetInt32(reader.GetOrdinal("DivisionID"));
                                Employee emp = new Employee(Idtmp, Usernametmp, PasswordHashtmp, FirstNametmp,
                                    LastNametmp, Emailtmp, ShiftGroupIDtmp, DivisionIDtmp);
                                empList.Add(emp);
                            }
                        }

                    }

                }
                return empList;
            }
        }

        public List<SelectListItem> SelectListOfAllEmployees()
        {
            string Idtmp = "";
            string Usernametmp = "";
            string FullName = "";

            var empList = new List<SelectListItem>();
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT Id, Username FROM dbo.AspNetUsers";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into variables
                                // wihout Role and StaffID
                                Idtmp = reader.GetString(reader.GetOrdinal("Id"));
                                Usernametmp = reader.GetString(reader.GetOrdinal("Username"));
                                FullName = SelectEmployeeFullName(Idtmp);
                                empList.Add(new SelectListItem { Text = FullName, Value = Idtmp });
                                
                               
                            }
                        }

                    }

                }
                return empList;
            }
        }

        public int SelectShiftGroupId(String EmployeeId)
        {
           int ShiftGroupIdtmp = 0;

           using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT ShiftGroupID FROM dbo.ShiftGroup WHERE EmployeeID01 = @EmployeeId OR EmployeeID02 = @EmployeeId";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeId", EmployeeId);

                    try
                    {
                        connection.Open();
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            // Check if the reader has any rows at all before starting to read.
                            if (reader.HasRows)
                            {
                                // Read advances to the next row.
                                while (reader.Read())
                                {
                                    // Save DB-Return into variables

                                    ShiftGroupIdtmp = reader.GetInt32(reader.GetOrdinal("ShiftGroupID"));
                                }
                            }
                        }
                    }
                    catch (SqlException e)
                    {
                        {
                          
                        }
                    }
                }
            }
            return ShiftGroupIdtmp;
        }


        public EmployeeDetailsViewItem SelectEmployeebyDetailsById(string id)
        {
            EmployeeDetailsViewItem emp;
            string Idtmp = "";
            string Usernametmp = "";
            string FirstNametmp = "";
            string LastNametmp = "";
            string Emailtmp = "";
            string RoleName = "";
            string ShiftGroupPartnerId = "";
            string ShiftGroupPartnerName = "";
            string DivisonName = "";
            int ShiftGroupIDtmp = 0;
            int DivisionIDtmp = 0;


            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT [Id], [UserName], [FirstName], [LastName], [Email], [ShiftGroupID], [DivisionID] FROM dbo.AspNetUsers WHERE Id='" + id + "'";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", id);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {

                            while (reader.Read())
                            {
                                Usernametmp = reader.GetString(reader.GetOrdinal("UserName"));
                                FirstNametmp = reader.GetString(reader.GetOrdinal("FirstName"));
                                LastNametmp = reader.GetString(reader.GetOrdinal("LastName"));
                                Emailtmp = reader.GetString(reader.GetOrdinal("Email"));

                                if (reader.IsDBNull(reader.GetOrdinal("ShiftGroupID")))
                                //Test, ob ID NULL, wenn ja ID = 0
                                {
                                    ShiftGroupIDtmp = 0;
                                }
                                else
                                {
                                    ShiftGroupIDtmp = reader.GetInt32(reader.GetOrdinal("ShiftGroupID"));
                                }

                              

                                RoleName = SelectRole(id);
                                ShiftGroupPartnerId= SelectShiftPartner(id);

                                if (ShiftGroupPartnerId == null)
                                {
                                    ShiftGroupPartnerName = "Keine Schichtgruppe";
                                }
                                else
                                {
                                    ShiftGroupPartnerName = SelectEmployeeFullName(ShiftGroupPartnerId);
                                }
                             

                             
                                DivisionIDtmp = reader.GetInt32(reader.GetOrdinal("DivisionID"));
                                emp = new EmployeeDetailsViewItem(Idtmp, Usernametmp, FirstNametmp,
                                    LastNametmp, Emailtmp, RoleName, ShiftGroupPartnerName, "");
                                return emp;
                            }
                        }
                        else
                        {
                            return null;
                        }
                   
                    }
                    return null;
                }
            }
        }


        public Boolean UpdateEmployeebyDetail(EmployeeDetailsViewItem Emp)
        {

            int ShiftGroupIdtmp = SelectShiftGroupId(Emp.UserId);
          

            bool Result = false;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "UPDATE dbo.AspNetUsers SET UserName = @UserName, FirstName = @FirstName, LastName = @LastName, Email = @EMail, ShiftGroupID = @ShiftGroupId WHERE Id = @Id";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("UserName", Emp.UserName);
                    cmd.Parameters.AddWithValue("FirstName", Emp.FirstName);
                    cmd.Parameters.AddWithValue("LastName", Emp.LastName);
                    cmd.Parameters.AddWithValue("Email", Emp.Email);
                    cmd.Parameters.AddWithValue("ShiftGroupId", ShiftGroupIdtmp);
                    cmd.Parameters.AddWithValue("Id", Emp.UserId);

                    try
                    {
                        connection.Open();
                        cmd.ExecuteNonQuery();
                        Result = true;
                    }
                    catch (SqlException e)
                    {
                        {
                            Result = false;
                        }
                    }
                }
            }
            return Result;
        }

        public bool ClearShiftGroupInUser(String EmployeeId)
        {
            bool Result = false;
            ShiftGroup Shiftgroup = SelectShiftGroup(EmployeeId);

            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "UPDATE dbo.AspNetUsers SET ShiftGroupID = NULL WHERE Id = @EmployeeId OR  Id = @ShiftGroupPartnerId";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeId", Shiftgroup.EmployeeID01);
                    cmd.Parameters.AddWithValue("ShiftGroupPartnerId", Shiftgroup.EmployeeID02);

                    try
                    {
                        connection.Open();
                        cmd.ExecuteNonQuery();
                        Result = true;
                    }
                    catch (SqlException e) //if failure in Database result = false
                    {
                        Result = false;
                    }

                }
            }

            return Result;
        }

        public bool UpdateShiftGroupInUser(String EmployeeId)
        {
            bool Result = false;
            ShiftGroup Shiftgroup = SelectShiftGroup(EmployeeId);

            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "UPDATE dbo.AspNetUsers SET ShiftGroupID = NULL WHERE Id = @EmployeeId OR  Id = @ShiftGroupPartnerId";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeId", Shiftgroup.EmployeeID01);
                    cmd.Parameters.AddWithValue("ShiftGroupPartnerId", Shiftgroup.EmployeeID02);

                    try
                    {
                        connection.Open();
                        cmd.ExecuteNonQuery();
                        Result = true;
                    }
                    catch (SqlException e) //if failure in Database result = false
                    {
                        Result = false;
                    }

                }
            }

            return Result;
        }


        public bool DeleteShiftGroup(String EmployeeId)
        {
            bool Result = false;
            ShiftGroup Shiftgroup = SelectShiftGroup(EmployeeId);

            ClearShiftGroupInUser(EmployeeId);

            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "DELETE FROM ShiftGroup WHERE EmployeeID01 = @EmployeeId OR EmployeeID02 = @EmployeeId";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeId", EmployeeId);

                    try
                    {
                        connection.Open();
                        cmd.ExecuteNonQuery();
                        Result = true;
                    }
                    catch (SqlException e) //if failure in Database result = false
                    {
                        Result = false;
                    }

                }
            }

           
            return Result;
        }



        /// <summary>
        /// selects all VacationRequests for Employee with EmployeeID in one of the states out of the list
        /// sortiert nach Startdatum
        /// </summary>
        /// <param name="EmployeeID">ID of VacationRequests owner</param>
        /// <param name="States">possible States we want for VacationRequests</param>
        /// <returns>list that contains VacationRequests</returns>
        public List<VacationRequest> SelectVacationRequestsInState(string EmployeeID, List<String> States)
        {
            ulong VacationRequestIDtmp = 0UL;
            DateTime VacationStartDatetmp = new DateTime(2000, 1, 1);
            DateTime VacationEndDatetmp = new DateTime(2000, 1, 1);
            DateTime SubmissionDatetmp = new DateTime(2000, 1, 1);
            VacationRequestProcessingState VacationProcessingStatetmp = 0;
            string VacationTypetmp = "c";
            DateTime ModificationDatetmp = new DateTime(2000, 1, 1);
            Boolean VacationOverlapNotetmp = false;
            Boolean VacationLockPeriodNotetmp = false;
            string EmployeeIDtmp = "c";
            int NetVacationDays = 0;

            var VacList = new List<VacationRequest>();
            foreach (String item in States)
            {
                using (SqlConnection connection = new SqlConnection(sqlConnectionString))
                {
                    string sqlStatement =
                        "SELECT * FROM dbo.VacationRequest WHERE EmployeeID = @EmployeeID AND VacationProcessingState = @States order by VacationStartDate";
                    using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                    {
                        cmd.Parameters.AddWithValue("@States", item);
                        cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                        connection.Open();
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            // Check if the reader has any rows at all before starting to read.
                            if (reader.HasRows)
                            {
                                // Read advances to the next row.
                                while (reader.Read())
                                {
                                    // Save DB-Returns into temp variables and insert them into the list

                                    VacationRequestIDtmp = (ulong)reader.GetInt64(reader.GetOrdinal("VacationRequestID"));
                                    VacationStartDatetmp = reader.GetDateTime(reader.GetOrdinal("VacationStartDate"));
                                    VacationEndDatetmp = reader.GetDateTime(reader.GetOrdinal("VacationEndDate"));
                                    SubmissionDatetmp = reader.GetDateTime(reader.GetOrdinal("SubmissionDate"));
                                    VacationTypetmp = reader.GetString(reader.GetOrdinal("VacationType"));
                                    VacationProcessingStatetmp =
                                        ConvertStringToVacationRequestProcessingState(
                                            reader.GetString(reader.GetOrdinal("VacationProcessingState")));
                                    ModificationDatetmp = reader.GetDateTime(reader.GetOrdinal("ModificationDate"));
                                    VacationOverlapNotetmp =
                                        reader.GetBoolean(reader.GetOrdinal("VacationPeriodOverlapNote"));
                                    VacationLockPeriodNotetmp =
                                        reader.GetBoolean(reader.GetOrdinal("VacationLockPeriodNote"));
                                    EmployeeIDtmp = reader.GetString(reader.GetOrdinal("EmployeeID"));
                                    NetVacationDays = reader.GetInt32(reader.GetOrdinal("NetVacationDays"));

                                    VacationRequest Vac = new VacationRequest(VacationRequestIDtmp, EmployeeIDtmp,
                                        VacationStartDatetmp,
                                        VacationEndDatetmp, SubmissionDatetmp, VacationTypetmp,
                                        VacationProcessingStatetmp,
                                        ModificationDatetmp, VacationOverlapNotetmp, VacationLockPeriodNotetmp,
                                        NetVacationDays);
                                    VacList.Add(Vac);
                                }
                            }
                        }
                    }
                }
            }
            List<VacationRequest> SortedList = new List<VacationRequest>();


            SortedList = VacList.OrderBy(x => x.getVacationStartDate()).ToList();  //sort the list


            return SortedList;
        }

        /// <summary>
        /// selects all VacationRequests for Employee with EmployeeID in the same State like State
        /// sortiert nach Startdatum
        /// </summary>
        /// <param name="EmployeeID">EmployeeID of the VacationRequests owner</param>
        /// <param name="State">only possible State for VacationRequests we want to get out of the DB</param>
        /// <returns>list that contains VacationRequests</returns>
        public List<VacationRequest> SelectVacationRequestsInState(string EmployeeID, String State)
        {
            ulong VacationRequestIDtmp = 0UL;
            DateTime VacationStartDatetmp = new DateTime(2000, 1, 1);
            DateTime VacationEndDatetmp = new DateTime(2000, 1, 1);
            DateTime SubmissionDatetmp = new DateTime(2000, 1, 1);
            VacationRequestProcessingState VacationProcessingStatetmp = 0;
            string VacationTypetmp = "c";
            DateTime ModificationDatetmp = new DateTime(2000, 1, 1);
            Boolean VacationOverlapNotetmp = false;
            Boolean VacationLockPeriodNotetmp = false;
            string EmployeeIDtmp = "c";
            int NetVacationDays = 0;


            var VacList = new List<VacationRequest>();
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT * FROM dbo.VacationRequest WHERE EmployeeID = @EmployeeID AND VacationProcessingState = @State order by VacationStartDate";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("@State", State);
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Returns into temp variables and insert them into the list

                                VacationRequestIDtmp = (ulong)reader.GetInt64(reader.GetOrdinal("VacationRequestID"));
                                VacationStartDatetmp = reader.GetDateTime(reader.GetOrdinal("VacationStartDate"));
                                VacationEndDatetmp = reader.GetDateTime(reader.GetOrdinal("VacationEndDate"));
                                SubmissionDatetmp = reader.GetDateTime(reader.GetOrdinal("SubmissionDate"));
                                VacationTypetmp = reader.GetString(reader.GetOrdinal("VacationType"));
                                VacationProcessingStatetmp = ConvertStringToVacationRequestProcessingState(reader.GetString(reader.GetOrdinal("VacationProcessingState")));
                                ModificationDatetmp = reader.GetDateTime(reader.GetOrdinal("ModificationDate"));
                                VacationOverlapNotetmp = reader.GetBoolean(reader.GetOrdinal("VacationPeriodOverlapNote"));
                                VacationLockPeriodNotetmp = reader.GetBoolean(reader.GetOrdinal("VacationLockPeriodNote"));
                                EmployeeIDtmp = reader.GetString(reader.GetOrdinal("EmployeeID"));
                                NetVacationDays = reader.GetInt32(reader.GetOrdinal("NetVacationDays"));

                                VacationRequest Vac = new VacationRequest(VacationRequestIDtmp, EmployeeIDtmp, VacationStartDatetmp,
                                    VacationEndDatetmp, SubmissionDatetmp, VacationTypetmp, VacationProcessingStatetmp,
                                    ModificationDatetmp, VacationOverlapNotetmp, VacationLockPeriodNotetmp, NetVacationDays);
                                VacList.Add(Vac);
                            }
                        }
                    }
                }
            }
            return VacList;
        }

        /// <summary>
        /// Selects one VacationRequest
        /// </summary>
        /// <param name="VacationRequestID">VacationRequestID of that one Request</param>
        /// <returns>that one VacationRequest</returns>
        public VacationRequest SelectVacationRequest(ulong VacationRequestID)
        {
            ulong VacationRequestIDtmp = 0UL;
            DateTime VacationStartDatetmp = new DateTime(2000, 1, 1);
            DateTime VacationEndDatetmp = new DateTime(2000, 1, 1);
            DateTime SubmissionDatetmp = new DateTime(2000, 1, 1);
            VacationRequestProcessingState VacationProcessingStatetmp = 0;
            string VacationTypetmp = "c";
            DateTime ModificationDatetmp = new DateTime(2000, 1, 1);
            Boolean VacationOverlapNotetmp = false;
            Boolean VacationLockPeriodNotetmp = false;
            string EmployeeIDtmp = "null";
            int NetVacationDays = 0;

            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT * FROM dbo.VacationRequest WHERE VacationRequestID = @VacationRequestID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("VacationRequestID", (long)VacationRequestID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Returns into temp variables and insert them into the list

                                VacationRequestIDtmp = (ulong)reader.GetInt64(reader.GetOrdinal("VacationRequestID"));
                                VacationStartDatetmp = reader.GetDateTime(reader.GetOrdinal("VacationStartDate"));
                                VacationEndDatetmp = reader.GetDateTime(reader.GetOrdinal("VacationEndDate"));
                                SubmissionDatetmp = reader.GetDateTime(reader.GetOrdinal("SubmissionDate"));
                                VacationTypetmp = reader.GetString(reader.GetOrdinal("VacationType"));
                                VacationProcessingStatetmp = ConvertStringToVacationRequestProcessingState(reader.GetString(reader.GetOrdinal("VacationProcessingState")));
                                ModificationDatetmp = reader.GetDateTime(reader.GetOrdinal("ModificationDate"));
                                VacationOverlapNotetmp = reader.GetBoolean(reader.GetOrdinal("VacationPeriodOverlapNote"));
                                VacationLockPeriodNotetmp = reader.GetBoolean(reader.GetOrdinal("VacationLockPeriodNote"));
                                EmployeeIDtmp = reader.GetString(reader.GetOrdinal("EmployeeID"));
                                NetVacationDays = reader.GetInt32(reader.GetOrdinal("NetVacationDays"));
                                
                            }
                        }
                    }
                }
            }
            VacationRequest Vac = new VacationRequest(VacationRequestIDtmp, EmployeeIDtmp, VacationStartDatetmp,
                                    VacationEndDatetmp, SubmissionDatetmp, VacationTypetmp, VacationProcessingStatetmp,
                                    ModificationDatetmp, VacationOverlapNotetmp, VacationLockPeriodNotetmp, NetVacationDays);
            return Vac;
        }

        /// <summary>
        /// updates the RemainingVacationDays for the Employee
        /// </summary>
        /// <param name="EmployeeID">EmployeeID of the Employee to be updated</param>
        /// <param name="RemainingVacationDays">RemainingVacationDays-to-be</param>
        /// <returns>update was true or false (succeeded or not)</returns>
        public Boolean UpdateRemainingVacationDays(String EmployeeID, int RemainingVacationDays)
        {
            bool Result = false;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "UPDATE VacationEntitlement SET VacationDayRemaining = @RemainingVacationDays WHERE EmployeeID = @EmployeeID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("RemainingVacationDays", RemainingVacationDays);
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);

                    try
                    {
                        connection.Open();
                        cmd.ExecuteNonQuery();
                        Result = true;
                    }
                    catch (SqlException e)
                    {
                        {
                            Result = false;
                        }
                    }
                }
            }
            return Result;
        }

        /// <summary>
        /// selects the full name of one employee
        /// </summary>
        /// <param name="EmployeeID">EmployeeID of the wanted Employee</param>
        /// <returns>string with full name of the Employee</returns>
        public string SelectEmployeeFullName(String EmployeeID)
        {
            string FullName = "null";
            string FirstNametmp = "null";
            string LastNametmp = "null";

            if(EmployeeID == null)
            {
                return null;
            }
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                        "SELECT FirstName, LastName FROM dbo.AspNetUsers WHERE Id = @EmployeeID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into variable
                                FirstNametmp = reader.GetString(reader.GetOrdinal("FirstName"));
                                LastNametmp = reader.GetString(reader.GetOrdinal("LastName"));
                            }

                        }              
                    }
                }
            }
            FullName = FirstNametmp + " " + LastNametmp;
            return FullName;
        }

        /// <summary>
        /// selects all VacationDays of Previous Year of Employee
        /// </summary>
        /// <param name="EmployeeID">EmployeeID </param>
        /// <returns>number of VacationDays of Previous Year</returns>
        public int SelectVacationDaysPreviousYear(String EmployeeID)
        {
            int VacationDaysPreviousYear = 0;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                        "SELECT VacationDaysPreviousYear FROM dbo.VacationEntitlement WHERE EmployeeID = @EmployeeID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into variable
                                VacationDaysPreviousYear = reader.GetInt32(reader.GetOrdinal("VacationDaysPreviousYear"));
                            }
                        }

                    }

                }
            }
            return VacationDaysPreviousYear;
        }

        /// <summary>
        /// selects all VacationDays of Employee for this year, excluding the days he got from the previous year
        /// </summary>
        /// <param name="EmployeeID">EmployeeID</param>
        /// <returns>int number of VacationDaysTotal this year</returns>
        public int SelectVacationDaysTotal(String EmployeeID)
        {
            int VacationDaysTotal = 0;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                        "SELECT VacationDaysTotal FROM dbo.VacationEntitlement WHERE EmployeeID = @EmployeeID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into variable
                                VacationDaysTotal = reader.GetInt32(reader.GetOrdinal("VacationDaysTotal"));
                            }
                        }

                    }

                }
            }
            return VacationDaysTotal;
        }

        /// <summary>
        /// selects the StartDate of one VacationRequest
        /// </summary>
        /// <param name="VacationRequestID">ID of VacationRequest</param>
        /// <returns>datetime StartDate</returns>
        public DateTime SelectVacationRequestStartDate(ulong VacationRequestID)
        {
            DateTime VacationStartDatetmp = new DateTime(2000, 1, 1);
            
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT VacationStartDate FROM dbo.VacationRequest WHERE VacationRequestID = @VacationRequestID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("VacationRequestID", (long)VacationRequestID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into temp variable
                                VacationStartDatetmp = reader.GetDateTime(reader.GetOrdinal("VacationStartDate"));
                                
                            }
                        }
                    }
                }
            }
            return VacationStartDatetmp;
        }

        /// <summary>
        /// selects the EndDate of VacationRequest
        /// </summary>
        /// <param name="VacationRequestID">ID of VacationRequest</param>
        /// <returns>datetime of EndDate</returns>
        public DateTime SelectVacationRequestEndDate(ulong VacationRequestID)
        {
            DateTime VacationEndDatetmp = new DateTime(2000, 1, 1);

            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT VacationEndDate FROM dbo.VacationRequest WHERE VacationRequestID = @VacationRequestID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("VacationRequestID", (long)VacationRequestID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into temp variable
                                VacationEndDatetmp = reader.GetDateTime(reader.GetOrdinal("VacationEndDate"));

                            }
                        }
                    }
                }
            }
            return VacationEndDatetmp;
        }

        /// <summary>
        /// deletes all VacationRequests for one Employee
        /// </summary>
        /// <param name="EmployeeID">ID of Employee</param>
        /// <returns>true if delete command succeeded or false if it failed</returns>
        public bool DeleteAllVacationRequests(string EmployeeID)
        {
            bool Result = false;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "DELETE FROM dbo.VacationRequest WHERE EmployeeID = @EmployeeID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);

                    try
                    {
                        connection.Open();
                        cmd.ExecuteNonQuery();
                        Result = true;
                    }
                    catch (SqlException e)
                    {
                        {
                            Result = false;
                        }
                    }
                }
            }
            return Result;
        }

        /// <summary>
        /// selects Role of Employee
        /// </summary>
        /// <param name="EmployeeID">ID of Employee</param>
        /// <returns>string that contains the role, if there is no role it returns false</returns>
        public string SelectRole(string EmployeeID)
        {
            string Role = "false";
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                        "SELECT Name FROM dbo.AspNetRoles, dbo.AspNetUserRoles WHERE AspNetUserRoles.UserId = @EmployeeID AND AspNetRoles.Id = AspNetUserRoles.RoleId";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into variable
                                Role = reader.GetString(reader.GetOrdinal("Name"));
                            }
                        }

                    }

                }
            }
            return Role;
        }

       

        /// <summary>
        /// inserts the role for one Employee, Employee need to exist !
        /// </summary>
        /// <param name="EmployeeID">ID of Employee</param>
        /// <param name="Role">his new Role which is one of these(Administrator, Bereichsleiter, Mitarbeiter)</param>
        /// <returns>bool if insert succeeded(true) or failed(false)</returns>
        public bool SetRole(string EmployeeID, string Role)
        {
            bool Result = false;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "INSERT INTO dbo.AspNetUserRoles VALUES(@EmployeeID,(SELECT Id FROM dbo.AspNetRoles WHERE Name = @Role))";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    cmd.Parameters.AddWithValue("Role", Role);
                    try
                    {
                        connection.Open();
                        cmd.ExecuteNonQuery();
                        Result = true;
                    }
                    catch (SqlException e)
                    {
                        {
                            Result = false;
                        }
                    }
                }
            }
            return Result;
        }

        /// <summary>
        /// changes the Role of one Employee
        /// </summary>
        /// <param name="EmployeeID">ID of that Employee</param>
        /// <param name="Role">the Role he will get which is one of these(Administrator, Bereichsleiter, Mitarbeiter)</param>
        /// <returns>bool if update succeeded(true) or failed(false)</returns>
        public bool ChangeRole(string EmployeeID, string Role)
        {
            bool Result = false;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "UPDATE dbo.AspNetUserRoles SET RoleId = (SELECT Id FROM dbo.AspNetRoles WHERE Name = @Role) WHERE UserId = @EmployeeID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    cmd.Parameters.AddWithValue("Role", Role);
                    try
                    {
                        connection.Open();
                        cmd.ExecuteNonQuery();
                        Result = true;
                    }
                    catch (SqlException e)
                    {
                        {
                            Result = false;
                        }
                    }
                }
            }
            return Result;
        }


    
        /// <summary>
        /// Select VacationRequests of the Requester without status canceled which overlap with the new VacationRequest
        /// </summary>
        /// <param name="VacationRequest">VacationRequest of the Requester</param>
        /// <param name="EmployeeID">EmployeeID of the Requester</param>
        /// <returns>List two DateTimes: Startdate and Enddate of the selected VacationRequests</returns>
        public List<Tuple<ulong, DateTime, DateTime>> SelectUncanceledEmployeeVacationRequestInTimePeriod(VacationRequest VacationRequest, string EmployeeID)
        {
            var timelist = new List<Tuple<ulong, DateTime, DateTime>>();
            ulong VacationRequestIDtmp = 0UL;
            DateTime StartTmp = new DateTime();
            DateTime EndTmp = new DateTime();
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT VacationRequestID, VacationStartDate, VacationEndDate FROM VacationRequest " + 
                    "WHERE EmployeeID = @EmployeeID AND (VacationProcessingState != @VacationProcessingState) AND " + 
                    "((@VacationStartDate BETWEEN VacationStartDate AND VacationEndDate) OR " + 
                    "(@VacationEndDate BETWEEN VacationStartDate AND VacationEndDate) OR " +
                    "(VacationStartDate BETWEEN @VacationStartDate AND @VacationEndDate) OR " +
                    "(VacationEndDate BETWEEN @VacationStartDate AND @VacationEndDate)) " + 
                    "order by VacationStartDate";

                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);
                    cmd.Parameters.AddWithValue("VacationStartDate", VacationRequest.getVacationStartDate());
                    cmd.Parameters.AddWithValue("VacationEndDate", VacationRequest.getVacationEndDate());
                    cmd.Parameters.AddWithValue("VacationProcessingState", CANCELED);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {                       
                        if (reader.HasRows)
                        {                           
                            while (reader.Read())
                            {
                                VacationRequestIDtmp = (ulong)reader.GetInt64(reader.GetOrdinal("VacationRequestID"));
                                StartTmp = reader.GetDateTime(reader.GetOrdinal("VacationStartDate"));
                                EndTmp = reader.GetDateTime(reader.GetOrdinal("VacationEndDate"));
                                timelist.Add(Tuple.Create(VacationRequestIDtmp,StartTmp, EndTmp));
                            }
                        }

                    }

                }
            }
            return timelist;
        }

    
        /// <summary>
        ///  Update the OverlapNote of a VacationRequest
        /// </summary>
        /// <param name="VacationRequestID">VacationRequestID of a VacationRquest which will be edited</param>
        /// <param name="state">a Boolean state if an overlap exists or not</param>
        /// <returns>Boolean result if the function worked correctly and all changes are wrote in the datebase</returns>
        public Boolean UpdateVacationRequestPeriodOverlapNote(ulong VacationRequestID, Boolean state ) 
        {
            bool Result = false;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =                                                                                                       //insert ID like that because of DataType conflicts
                    "UPDATE dbo.VacationRequest SET VacationPeriodOverlapNote = @VacationPeriodOverlapNote WHERE VacationRequestID = @VacationRequestID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("VacationRequestID", (long)VacationRequestID);
                    cmd.Parameters.AddWithValue("VacationPeriodOverlapNote", state);
                   
                    try
                    {
                        connection.Open();
                        cmd.ExecuteNonQuery(); 
                        Result = true;
                    }
                    catch (SqlException e) //if failure in Database result = false
                    {                       
                            Result = false;                       
                    }
                }
            }
            return Result;
        }


        //


        public bool DeleteVacationRequest(ulong VacationRequestID)
        {
            bool Result = false;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "DELETE FROM VacationRequest WHERE VacationRequestID = @VacationRequestID";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("VacationRequestID", (long)VacationRequestID);

                    try
                    {
                        connection.Open();
                        cmd.ExecuteNonQuery();
                        Result = true;
                    }
                    catch (SqlException e) //if failure in Database result = false
                    {
                        Result = false;
                    }
                }
            }
            return Result;
        }

        public List<ShiftGroup> SelectShiftGroupOfDivision()
        {
            string EmployeeID01tmp = "c";
            string EmployeeID02tmp = "c";
            int ShiftGroupIDtmp = 0;
            

            var ShiftList = new List<ShiftGroup>();
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT * FROM dbo.ShiftGroup";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into variables
                                // wihout Role and StaffID
                                EmployeeID01tmp = reader.GetString(reader.GetOrdinal("EmployeeID01"));
                                EmployeeID02tmp = reader.GetString(reader.GetOrdinal("EmployeeID02"));
                                ShiftGroupIDtmp = reader.GetInt32(reader.GetOrdinal("ShiftGroupID"));

                                ShiftGroup DivShiftgroup = new ShiftGroup(ShiftGroupIDtmp, EmployeeID01tmp, EmployeeID02tmp);

                                ShiftList.Add(DivShiftgroup);
                            }
                        }

                    }

                }
            }
            return ShiftList;
        }

        public ShiftGroup SelectShiftGroup(String EmployeeId)
        {
            string EmployeeID01tmp = "c";
            string EmployeeID02tmp = "c";
            int ShiftGroupIDtmp = 0;

            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT * FROM dbo.ShiftGroup WHERE EmployeeID01 = @EmployeeId OR EmployeeID02 = @EmployeeId";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeId", EmployeeId);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        cmd.Parameters.AddWithValue("EmployeeID01", EmployeeId);

                        // Check if the reader has any rows at all before starting to read.
                        if (reader.HasRows)
                        {
                            // Read advances to the next row.
                            while (reader.Read())
                            {
                                // Save DB-Return into variables
                                // wihout Role and StaffID
                                EmployeeID01tmp = reader.GetString(reader.GetOrdinal("EmployeeID01"));
                                EmployeeID02tmp = reader.GetString(reader.GetOrdinal("EmployeeID02"));
                                ShiftGroupIDtmp = reader.GetInt32(reader.GetOrdinal("ShiftGroupID"));

                                ShiftGroup Shiftgroup = new ShiftGroup(ShiftGroupIDtmp, EmployeeID01tmp, EmployeeID02tmp);

                                return Shiftgroup;
                            }
                        }

                    }
                    return null; 
                }
            }
           
        }



        public Boolean InsertNewShiftgroup(ShiftGroup Shiftgroup)
        {
            bool Result = false;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "INSERT INTO [dbo].[Shiftgroup] VALUES (@EmployeeID01, @EmployeeID02)";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID01", Shiftgroup.getEmployeeID01());
                    cmd.Parameters.AddWithValue("EmployeeID02", Shiftgroup.getEmployeeID02());

                    try
                    {
                       
                        connection.Open();
                        cmd.ExecuteNonQuery();//insert/delete/update is nonQuery
                        UpdateNewShiftgroupInUser(Shiftgroup);
                        Result = true;
                    }
                    catch (SqlException e) //if Failure in Database then Result = false
                    {
                        {
                            Result = false;
                        }
                    }
                }
            }
            return Result;
        }

        public Boolean UpdateNewShiftgroupInUser(ShiftGroup Shiftgroup)
        {
            bool Result = false;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "UPDATE dbo.[AspNetUsers] SET ShiftGroupID = @ShiftgroupId WHERE Id = @EmployeeID01 OR Id = @EmployeeID02";
                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("ShiftgroupId", SelectShiftGroupId(Shiftgroup.getEmployeeID01()));
                    cmd.Parameters.AddWithValue("EmployeeID01", Shiftgroup.getEmployeeID01());
                    cmd.Parameters.AddWithValue("EmployeeID02", Shiftgroup.getEmployeeID02());

                    try
                    {

                        connection.Open();
                        cmd.ExecuteNonQuery();//insert/delete/update is nonQuery
                        Result = true;
                    }
                    catch (SqlException e) //if Failure in Database then Result = false
                    {
                        {
                            Result = false;
                        }
                    }
                }
            }
            return Result;
        }


        public Boolean CheckForShiftgroup(string EmployeeID)
        {
            bool Result = false;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "SELECT * FROM [dbo].[Shiftgroup] WHERE EmployeeID01 = @EmployeeID OR EmployeeID02 =  @EmployeeID";

                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    cmd.Parameters.AddWithValue("EmployeeID", EmployeeID);


                    try
                    {
                        connection.Open();
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            cmd.Parameters.AddWithValue("EmployeeID01", EmployeeID);

                            // Check if the reader has any rows at all before starting to read.
                            if (reader.HasRows)
                            {
                                return true;
                            }
                            else
                            {
                                return false;
                            }

                        }
                    }
                    catch (SqlException e) //if Failure in Database then Result = false
                    {
                        {
                            Result = false;
                        }
                    }
                
                }
            }
            return Result;
        }






        /// <summary>
        /// resets db to initial test data
        /// </summary>
        /// <returns>bool if success or failure</returns>
        public bool ResetDB()
        {
            bool Result = false;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "drop table AspNetUserRoles;drop table AspNetUserLogins;" +
                    "drop table AspNetUserClaims;" +
                    "drop table AspNetRoles;" + 
                    "drop table VacationEntitlement;" +
                    "drop table SickNote;" +
                    "drop table VacationLockPeriod;" + 
                    "drop table VacationRequest;" +
                    "drop table AspNetUsers;" + 
                    "drop table Division;" + 
                    "drop table ShiftGroup;" + 
                    "drop table Calendar; "+ 
                    "CREATE TABLE [dbo].[AspNetRoles] (" +
                        "[Id]   NVARCHAR (128) NOT NULL," +
                        "[Name] NVARCHAR (256) NOT NULL," +
                        "CONSTRAINT [PK_dbo.AspNetRoles] PRIMARY KEY CLUSTERED ([Id] ASC)); " +
                    "CREATE UNIQUE NONCLUSTERED INDEX [RoleNameIndex]ON [dbo].[AspNetRoles]([Name] ASC);" + 
                    "CREATE TABLE [dbo].[Division] (" +
                        "[DivisionID]        INT            IDENTITY (1, 1) NOT NULL," +
                        "[DivisionTitle]     NVARCHAR (30)      NOT NULL," +
                        "[DivisionManagerID] NVARCHAR (128) NULL," +
                        "PRIMARY KEY CLUSTERED ([DivisionID] ASC));" + 
                    "CREATE TABLE [dbo].[ShiftGroup] (" +
                        "[ShiftGroupID] INT            IDENTITY (1, 1) NOT NULL," +
                        "[EmployeeID01] NVARCHAR (128) NOT NULL," +
                        "[EmployeeID02] NVARCHAR (128) NOT NULL," +
                        "PRIMARY KEY CLUSTERED ([ShiftGroupID] ASC));" + 
                    "CREATE TABLE [dbo].[AspNetUsers] (" +
                        "[Id] NVARCHAR (128) NOT NULL," +
                        "[Email] NVARCHAR (256) NULL," +
                        "[EmailConfirmed] BIT   NOT NULL," +
                        "[PasswordHash]         NVARCHAR (MAX) NULL," +
                        "[SecurityStamp]        NVARCHAR (MAX) NULL," +
                        "[PhoneNumber]          NVARCHAR (MAX) NULL," +
                        "[PhoneNumberConfirmed] BIT            NOT NULL," +
                        "[TwoFactorEnabled]     BIT            NOT NULL," +
                        "[LockoutEndDateUtc]    DATETIME       NULL," +
                        "[LockoutEnabled]       BIT            NOT NULL," +
                        "[AccessFailedCount]    INT            NOT NULL," +
                        "[UserName]             NVARCHAR (256) NOT NULL," +
                        "[ShiftGroupID]		   INT			  NULL," +
                        "[DivisionID]           INT            NOT NULL," +
                        "[FirstName]			   NVARCHAR(30)   NOT NULL," +
                        "[LastName]			   NVARCHAR(30)   NOT NULL," +
                        "CONSTRAINT [PK_dbo.AspNetUsers] PRIMARY KEY CLUSTERED ([Id] ASC)," +
                        "FOREIGN KEY(ShiftGroupID) REFERENCES ShiftGroup(ShiftGroupID),	" +
                        "FOREIGN KEY(DivisionID) REFERENCES Division(DivisionID));" + 
                    "CREATE TABLE [dbo].[AspNetUserClaims] (" +
                        "[Id]         INT            IDENTITY (1, 1) NOT NULL," +
                        "[UserId]     NVARCHAR (128) NOT NULL," +
                        "[ClaimType]  NVARCHAR (MAX) NULL," +
                        "[ClaimValue] NVARCHAR (MAX) NULL," +
                        "CONSTRAINT [PK_dbo.AspNetUserClaims] PRIMARY KEY CLUSTERED ([Id] ASC)," +
                        "CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE);" + 
                    "CREATE NONCLUSTERED INDEX [IX_UserId]ON [dbo].[AspNetUserClaims]([UserId] ASC);" +
                    "CREATE TABLE [dbo].[AspNetUserLogins] (" +
                        "[LoginProvider] NVARCHAR (128) NOT NULL," +
                        "[ProviderKey]   NVARCHAR (128) NOT NULL," +
                        "[UserId]        NVARCHAR (128) NOT NULL," +
                        "CONSTRAINT [PK_dbo.AspNetUserLogins] PRIMARY KEY CLUSTERED ([LoginProvider] ASC, [ProviderKey] ASC, [UserId] ASC)," +
                        "CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE);" + 
                    "CREATE NONCLUSTERED INDEX [IX_UserId]ON [dbo].[AspNetUserLogins]([UserId] ASC);" +
                    "CREATE TABLE [dbo].[AspNetUserRoles] (" +
                        "[UserId] NVARCHAR (128) NOT NULL," +
                        "[RoleId] NVARCHAR (128) NOT NULL," +
                        "CONSTRAINT [PK_dbo.AspNetUserRoles] PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)," +
                        "CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[AspNetRoles] ([Id]) ON DELETE CASCADE," +
                        "CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE);" + 
                    "CREATE NONCLUSTERED INDEX [IX_UserId]ON [dbo].[AspNetUserRoles]([UserId] ASC);" +
                    "CREATE NONCLUSTERED INDEX [IX_RoleId]ON [dbo].[AspNetUserRoles]([RoleId] ASC);" +
                    "CREATE UNIQUE NONCLUSTERED INDEX [UserNameIndex]ON [dbo].[AspNetUsers]([UserName] ASC);" + 
                    "CREATE TABLE [dbo].[SickNote] (" +
                        "[SickNoteID]         INT            IDENTITY (1, 1) NOT NULL," +
                        "[SickLeaveStartDate] DATE           NOT NULL," +
                        "[SickLeaveEndDate]   DATE           NOT NULL," +
                        "[EmployeeID]         NVARCHAR (128) NOT NULL," +
                        "PRIMARY KEY CLUSTERED ([SickNoteID] ASC)," +
                        "FOREIGN KEY ([EmployeeID]) REFERENCES [dbo].[AspNetUsers] ([Id]));" + 
                    "CREATE TABLE [dbo].[VacationEntitlement] (" +
                        "[VacationEntitlementID]    INT            IDENTITY (1, 1) NOT NULL," +
                        "[VacationDaysTotal]        INT            NOT NULL," +
                        "[VacationDaysPreviousYear] INT            NOT NULL," +
                        "[VacationDayRemaining]     INT            NOT NULL," +
                        "[EmployeeID]               NVARCHAR (128) NOT NULL," +
                        "PRIMARY KEY CLUSTERED ([VacationEntitlementID] ASC)," +
                        "FOREIGN KEY ([EmployeeID]) REFERENCES [dbo].[AspNetUsers] ([Id]));" +
                    "CREATE TABLE [dbo].[VacationRequest] (" +
                        "[VacationRequestID]         BIGINT         NOT NULL," +
                        "[VacationStartDate]         DATE           NOT NULL," +
                        "[VacationEndDate]           DATE           NOT NULL," +
                        "[SubmissionDate]            DATETIME       NOT NULL," +
                        "[VacationType]              NVARCHAR (30)  NOT NULL," +
                        "[VacationProcessingState]   NVARCHAR (35)  NOT NULL," +
                        "[ModificationDate]          DATETIME       NULL," +
                        "[VacationPeriodOverlapNote] BIT			   NULL," +
                        "[VacationLockPeriodNote]    BIT			   NULL," +
                        "[NetVacationDays]			INT			   NOT NULL," +
                        "[EmployeeID]                NVARCHAR (128) NOT NULL," +
                        "PRIMARY KEY CLUSTERED ([VacationRequestID] ASC)," +
                        "FOREIGN KEY ([EmployeeID]) REFERENCES [dbo].[AspNetUsers] ([Id]));" + 
                    "CREATE TABLE [dbo].[VacationLockPeriod] (" +
                        "[LockPeriodID]        INT  IDENTITY (1, 1) NOT NULL," +
                        "[LockPeriodStartDate] DATE NOT NULL," +
                        "[LockPeriodEndDate]   DATE NOT NULL," +
                        "[DivisionID]          INT  NOT NULL," +
                        "PRIMARY KEY CLUSTERED ([LockPeriodID] ASC)," +
                        "FOREIGN KEY ([DivisionID]) REFERENCES [dbo].[Division] ([DivisionID]));" + 
                    "CREATE TABLE [dbo].[Calendar] ( " +
                        "Date 		DATE 		NOT NULL," +
                        " Weekday 		NVARCHAR(30) 	NOT NULL, " +
                        "DayType 		NVARCHAR(30) 	NOT NULL);" + 
                    "INSERT INTO Division VALUES ('Laborbereich','NULL');" + 
                    "INSERT INTO AspNetUsers VALUES ('5ac5e880-c123-4ba5-923e-36f91b079b96','mmustermann@tim-n.de','False','AIZqHNqx3pA4Yx04xjxyNdAPBFCNN2tsTBQOhBJXCsGtFfu18xb3yipVEd0qiG90tw==', 	'7703780e-f5fc-496b-a6ef-4f0b53aed48b',	NULL,'False','False',NULL,'True',0,'mmustermann',NULL,(SELECT DivisionID FROM Division WHERE DivisionTitle = 'Laborbereich'),'Max','Mustermann');" + 
                    "INSERT INTO AspNetUsers VALUES ('1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b','jdoe@tim-n.de','False','AD3rKH8kDTf0wZSVeYnckCqd/UKq1Pmt0uz5G71bNADVNSpffhiClAcqbvzp3ZTLag==',	'4de219b4-fd63-4f9a-b986-18cb5e825c06',NULL,'False','False',NULL,'True',0,'jdoe',NULL,(SELECT DivisionID FROM Division WHERE DivisionTitle = 'Laborbereich'),'John','Doe');" + 
                    "INSERT INTO AspNetUsers VALUES ('1e04bd54-4fb8-4bb8-806c-8ad7b8c90c43','emusterfrau@tim-n.de','False','AOQNOy7qHEN5x2Nh7uXund7MC4y2aCsiPq2mLB/qS62M9so8/okwIfUMj2JtveNqmQ==','36a672c5-a810-46a6-a0ba-5e82d3dfc34b',	NULL,'False','False',NULL,'True',0,'emusterfrau',NULL,(SELECT DivisionID FROM Division WHERE DivisionTitle = 'Laborbereich'),'Erika','Musterfrau');" + 
                    "INSERT INTO AspNetUsers VALUES ('bff0f95a-5b1a-42cc-a1cc-8f520477c37a','admin@eule.de','False','AJRpukSrJjBt2OS/KkVBicauJOuUczWa0r1/+qiFCXIjWBqfENU+o1xFFwzWWAi+CA==', 'c1f282a8-2f59-4436-a220-784fb6674c4e',	NULL,'False','False',NULL,'True',0,'Administrator',NULL,(SELECT DivisionID FROM Division WHERE DivisionTitle = 'Laborbereich'),'Admin','Nistrator');" +
                    "UPDATE Division SET DivisionManagerID = '1e04bd54-4fb8-4bb8-806c-8ad7b8c90c43' WHERE DivisionID = 1;" + 
                    "INSERT INTO VacationEntitlement VALUES (23,10,15,'5ac5e880-c123-4ba5-923e-36f91b079b96');" + 
                    "INSERT INTO VacationEntitlement VALUES (28,5,10,'1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b');" + 
                    "INSERT INTO VacationEntitlement VALUES (23,10,33,'1e04bd54-4fb8-4bb8-806c-8ad7b8c90c43');" + 
                    "INSERT INTO ShiftGroup VALUES ('5ac5e880-c123-4ba5-923e-36f91b079b96','1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b');" + 
                    "UPDATE AspNetUsers SET ShiftGroupID = (SELECT ShiftGroupID FROM ShiftGroup WHERE EmployeeID01 = '5ac5e880-c123-4ba5-923e-36f91b079b96' OR EmployeeID02 = '5ac5e880-c123-4ba5-923e-36f91b079b96') WHERE Id = '5ac5e880-c123-4ba5-923e-36f91b079b96';" + 
                    "UPDATE AspNetUsers SET ShiftGroupID = (SELECT ShiftGroupID FROM ShiftGroup WHERE EmployeeID01 = '1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b' OR EmployeeID02 = '1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b') WHERE Id = '1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b';" + 
                    "INSERT INTO VacationRequest VALUES (1,'20150101','20150105',GETDATE(),'Erholungsurlaub','genommen',GETDATE(),'True','True',2,'5ac5e880-c123-4ba5-923e-36f91b079b96');" + 
                    "INSERT INTO VacationRequest VALUES (2,'20150105','20150109',GETDATE(),'Erholungsurlaub','storniert',GETDATE(),'True','True',0,'5ac5e880-c123-4ba5-923e-36f91b079b96');" + 
                    "INSERT INTO VacationRequest VALUES (3,'20150401','20150403',GETDATE(),'Erholungsurlaub','abgelehnt durch Schichtpartner',GETDATE(),'True','True',3,'5ac5e880-c123-4ba5-923e-36f91b079b96');" + 
                    "INSERT INTO VacationRequest VALUES (4,'20150112','20150112',GETDATE(),'Erholungsurlaub','abgelehnt durch Bereichsleiter',GETDATE(),'True','True',1,'5ac5e880-c123-4ba5-923e-36f91b079b96');" + 
                    "INSERT INTO VacationRequest VALUES (5,'20151201','20151201',GETDATE(),'Erholungsurlaub','zugestimmt',GETDATE(),'False','False',1,'5ac5e880-c123-4ba5-923e-36f91b079b96');" + 
                    "INSERT INTO VacationRequest VALUES (6,'20151001','20151015',GETDATE(),'Erholungsurlaub','offen',GETDATE(),'False','False',11,'5ac5e880-c123-4ba5-923e-36f91b079b96');" + 
                    "INSERT INTO VacationRequest VALUES (7,'20150501','20150504',GETDATE(),'Erholungsurlaub','genommen',GETDATE(),'False','False',1,'1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b');" + 
                    "INSERT INTO VacationRequest VALUES (8,'20150105','20150109',GETDATE(),'Erholungsurlaub','abgelehnt durch Bereichsleiter',GETDATE(),'True','False',5,'1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b');" + 
                    "INSERT INTO VacationRequest VALUES (9,'20150505','20150505',GETDATE(),'Erholungsurlaub','storniert',GETDATE(),'False','True',1,'1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b');" + 
                    "INSERT INTO VacationRequest VALUES (10,'20151201','20151201',GETDATE(),'Erholungsurlaub','abgelehnt durch Schichtpartner',GETDATE(),'True','False',1,'1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b');" + 
                    "INSERT INTO VacationRequest VALUES (11,'20151202','20151207',GETDATE(),'Erholungsurlaub','zugestimmt',GETDATE(),'False','False',4,'1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b');" + 
                    "INSERT INTO VacationRequest VALUES (12,'20151208','20151208',GETDATE(),'Erholungsurlaub','befürwortet',GETDATE(),'False','False',1,'1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b');" + 
                    "INSERT INTO VacationRequest VALUES (13,'20151001','20151015',GETDATE(),'Erholungsurlaub','offen',GETDATE(),'False','False',11,'1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b');	" + 
                    "INSERT INTO Calendar VALUES ('20150101','Donnerstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20150403','Freitag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20150406','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20150501','Freitag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20150514','Donnerstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20150525','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20151003','Samstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20151031','Samstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20151118','Mittwoch','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20151225','Freitag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20151226','Samstag','Feiertag');	" +
                    "INSERT INTO Calendar VALUES ('20160101','Freitag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20160325','Freitag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20160328','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20160501','Sonntag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20160505','Donnerstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20160516','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20161003','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20161031','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20161116','Mittwoch','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20161225','Sonntag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20161226','Montag','Feiertag');	" +
                    "INSERT INTO Calendar VALUES ('20170101','Sonntag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20170414','Freitag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20170417','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20170501','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20170525','Donnerstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20170605','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20171003','Dienstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20171031','Dienstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20171122','Mittwoch','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20171225','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20171226','Dienstag','Feiertag');	" +
                    "INSERT INTO Calendar VALUES ('20180101','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20180330','Freitag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20180402','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20180501','Dienstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20180510','Donnerstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20180521','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20181003','Mittwoch','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20181031','Mittwoch','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20181121','Mittwoch','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20181225','Dienstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20181226','Mittwoch','Feiertag');" + 
                    "INSERT INTO VacationLockPeriod VALUES ('20150601', '20150610',1);" + 
                    "INSERT INTO AspNetRoles VALUES (4,'Administrator');" + 
                    "INSERT INTO AspNetRoles VALUES (3,'Bereichsleiter');" + 
                    "INSERT INTO AspNetRoles VALUES (2,'Verwalter');" + 
                    "INSERT INTO AspNetRoles VALUES (1,'Mitarbeiter');" + 
                    "INSERT INTO AspNetUserRoles values ('1e04bd54-4fb8-4bb8-806c-8ad7b8c90c43',3);" + 
                    "INSERT INTO AspNetUserRoles values('1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b',2);" + 
                    "INSERT INTO AspNetUserRoles values('5ac5e880-c123-4ba5-923e-36f91b079b96',1);" +
                    "INSERT INTO AspNetUserRoles values ('bff0f95a-5b1a-42cc-a1cc-8f520477c37a',4);";

                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    try
                    {
                        connection.Open();
                        cmd.ExecuteNonQuery(); //insert,delete,update is NonQuery
                        Result = true;
                    }
                    catch (SqlException e) //if failure in Database result = false
                    {
                        {
                            Result = false;
                        }
                    }
                }
            }
            return Result;
        }

        public bool RestoreDemoDB()
        {
            bool Result = false;
            using (SqlConnection connection = new SqlConnection(sqlConnectionString))
            {
                string sqlStatement =
                    "drop table AspNetUserRoles;drop table AspNetUserLogins;" +
                    "drop table AspNetUserClaims;" +
                    "drop table AspNetRoles;" + 
                    "drop table VacationEntitlement;" +
                    "drop table SickNote;" +
                    "drop table VacationLockPeriod;" + 
                    "drop table VacationRequest;" +
                    "drop table AspNetUsers;" + 
                    "drop table Division;" + 
                    "drop table ShiftGroup;" + 
                    "drop table Calendar; "+ 
                    "CREATE TABLE [dbo].[AspNetRoles] (" +
                        "[Id]   NVARCHAR (128) NOT NULL," +
                        "[Name] NVARCHAR (256) NOT NULL," +
                        "CONSTRAINT [PK_dbo.AspNetRoles] PRIMARY KEY CLUSTERED ([Id] ASC)); " +
                    "CREATE UNIQUE NONCLUSTERED INDEX [RoleNameIndex]ON [dbo].[AspNetRoles]([Name] ASC);" + 
                    "CREATE TABLE [dbo].[Division] (" +
                        "[DivisionID]        INT            IDENTITY (1, 1) NOT NULL," +
                        "[DivisionTitle]     NVARCHAR (30)      NOT NULL," +
                        "[DivisionManagerID] NVARCHAR (128) NULL," +
                        "PRIMARY KEY CLUSTERED ([DivisionID] ASC));" + 
                    "CREATE TABLE [dbo].[ShiftGroup] (" +
                        "[ShiftGroupID] INT            IDENTITY (1, 1) NOT NULL," +
                        "[EmployeeID01] NVARCHAR (128) NOT NULL," +
                        "[EmployeeID02] NVARCHAR (128) NOT NULL," +
                        "PRIMARY KEY CLUSTERED ([ShiftGroupID] ASC));" + 
                    "CREATE TABLE [dbo].[AspNetUsers] (" +
                        "[Id] NVARCHAR (128) NOT NULL," +
                        "[Email] NVARCHAR (256) NULL," +
                        "[EmailConfirmed] BIT   NOT NULL," +
                        "[PasswordHash]         NVARCHAR (MAX) NULL," +
                        "[SecurityStamp]        NVARCHAR (MAX) NULL," +
                        "[PhoneNumber]          NVARCHAR (MAX) NULL," +
                        "[PhoneNumberConfirmed] BIT            NOT NULL," +
                        "[TwoFactorEnabled]     BIT            NOT NULL," +
                        "[LockoutEndDateUtc]    DATETIME       NULL," +
                        "[LockoutEnabled]       BIT            NOT NULL," +
                        "[AccessFailedCount]    INT            NOT NULL," +
                        "[UserName]             NVARCHAR (256) NOT NULL," +
                        "[ShiftGroupID]		   INT			  NULL," +
                        "[DivisionID]           INT            NOT NULL," +
                        "[FirstName]			   NVARCHAR(30)   NOT NULL," +
                        "[LastName]			   NVARCHAR(30)   NOT NULL," +
                        "CONSTRAINT [PK_dbo.AspNetUsers] PRIMARY KEY CLUSTERED ([Id] ASC)," +
                        "FOREIGN KEY(ShiftGroupID) REFERENCES ShiftGroup(ShiftGroupID),	" +
                        "FOREIGN KEY(DivisionID) REFERENCES Division(DivisionID));" + 
                    "CREATE TABLE [dbo].[AspNetUserClaims] (" +
                        "[Id]         INT            IDENTITY (1, 1) NOT NULL," +
                        "[UserId]     NVARCHAR (128) NOT NULL," +
                        "[ClaimType]  NVARCHAR (MAX) NULL," +
                        "[ClaimValue] NVARCHAR (MAX) NULL," +
                        "CONSTRAINT [PK_dbo.AspNetUserClaims] PRIMARY KEY CLUSTERED ([Id] ASC)," +
                        "CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE);" + 
                    "CREATE NONCLUSTERED INDEX [IX_UserId]ON [dbo].[AspNetUserClaims]([UserId] ASC);" +
                    "CREATE TABLE [dbo].[AspNetUserLogins] (" +
                        "[LoginProvider] NVARCHAR (128) NOT NULL," +
                        "[ProviderKey]   NVARCHAR (128) NOT NULL," +
                        "[UserId]        NVARCHAR (128) NOT NULL," +
                        "CONSTRAINT [PK_dbo.AspNetUserLogins] PRIMARY KEY CLUSTERED ([LoginProvider] ASC, [ProviderKey] ASC, [UserId] ASC)," +
                        "CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE);" + 
                    "CREATE NONCLUSTERED INDEX [IX_UserId]ON [dbo].[AspNetUserLogins]([UserId] ASC);" +
                    "CREATE TABLE [dbo].[AspNetUserRoles] (" +
                        "[UserId] NVARCHAR (128) NOT NULL," +
                        "[RoleId] NVARCHAR (128) NOT NULL," +
                        "CONSTRAINT [PK_dbo.AspNetUserRoles] PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)," +
                        "CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[AspNetRoles] ([Id]) ON DELETE CASCADE," +
                        "CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE);" + 
                    "CREATE NONCLUSTERED INDEX [IX_UserId]ON [dbo].[AspNetUserRoles]([UserId] ASC);" +
                    "CREATE NONCLUSTERED INDEX [IX_RoleId]ON [dbo].[AspNetUserRoles]([RoleId] ASC);" +
                    "CREATE UNIQUE NONCLUSTERED INDEX [UserNameIndex]ON [dbo].[AspNetUsers]([UserName] ASC);" + 
                    "CREATE TABLE [dbo].[SickNote] (" +
                        "[SickNoteID]         INT            IDENTITY (1, 1) NOT NULL," +
                        "[SickLeaveStartDate] DATE           NOT NULL," +
                        "[SickLeaveEndDate]   DATE           NOT NULL," +
                        "[EmployeeID]         NVARCHAR (128) NOT NULL," +
                        "PRIMARY KEY CLUSTERED ([SickNoteID] ASC)," +
                        "FOREIGN KEY ([EmployeeID]) REFERENCES [dbo].[AspNetUsers] ([Id]));" + 
                    "CREATE TABLE [dbo].[VacationEntitlement] (" +
                        "[VacationEntitlementID]    INT            IDENTITY (1, 1) NOT NULL," +
                        "[VacationDaysTotal]        INT            NOT NULL," +
                        "[VacationDaysPreviousYear] INT            NOT NULL," +
                        "[VacationDayRemaining]     INT            NOT NULL," +
                        "[EmployeeID]               NVARCHAR (128) NOT NULL," +
                        "PRIMARY KEY CLUSTERED ([VacationEntitlementID] ASC)," +
                        "FOREIGN KEY ([EmployeeID]) REFERENCES [dbo].[AspNetUsers] ([Id]));" +
                    "CREATE TABLE [dbo].[VacationRequest] (" +
                        "[VacationRequestID]         BIGINT         NOT NULL," +
                        "[VacationStartDate]         DATE           NOT NULL," +
                        "[VacationEndDate]           DATE           NOT NULL," +
                        "[SubmissionDate]            DATETIME       NOT NULL," +
                        "[VacationType]              NVARCHAR (30)  NOT NULL," +
                        "[VacationProcessingState]   NVARCHAR (35)  NOT NULL," +
                        "[ModificationDate]          DATETIME       NULL," +
                        "[VacationPeriodOverlapNote] BIT			   NULL," +
                        "[VacationLockPeriodNote]    BIT			   NULL," +
                        "[NetVacationDays]			INT			   NOT NULL," +
                        "[EmployeeID]                NVARCHAR (128) NOT NULL," +
                        "PRIMARY KEY CLUSTERED ([VacationRequestID] ASC)," +
                        "FOREIGN KEY ([EmployeeID]) REFERENCES [dbo].[AspNetUsers] ([Id]));" + 
                    "CREATE TABLE [dbo].[VacationLockPeriod] (" +
                        "[LockPeriodID]        INT  IDENTITY (1, 1) NOT NULL," +
                        "[LockPeriodStartDate] DATE NOT NULL," +
                        "[LockPeriodEndDate]   DATE NOT NULL," +
                        "[DivisionID]          INT  NOT NULL," +
                        "PRIMARY KEY CLUSTERED ([LockPeriodID] ASC)," +
                        "FOREIGN KEY ([DivisionID]) REFERENCES [dbo].[Division] ([DivisionID]));" + 
                    "CREATE TABLE [dbo].[Calendar] ( " +
                        "Date 		DATE 		NOT NULL," +
                        " Weekday 		NVARCHAR(30) 	NOT NULL, " +
                        "DayType 		NVARCHAR(30) 	NOT NULL);" + 
                    "INSERT INTO Division VALUES ('Laborbereich','NULL');" + 
                    "INSERT INTO AspNetUsers VALUES ('5ac5e880-c123-4ba5-923e-36f91b079b96','mmustermann@tim-n.de','False','AIZqHNqx3pA4Yx04xjxyNdAPBFCNN2tsTBQOhBJXCsGtFfu18xb3yipVEd0qiG90tw==', 	'7703780e-f5fc-496b-a6ef-4f0b53aed48b',	NULL,'False','False',NULL,'True',0,'mmustermann',NULL,(SELECT DivisionID FROM Division WHERE DivisionTitle = 'Laborbereich'),'Max','Mustermann');" + 
                    "INSERT INTO AspNetUsers VALUES ('1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b','jdoe@tim-n.de','False','AD3rKH8kDTf0wZSVeYnckCqd/UKq1Pmt0uz5G71bNADVNSpffhiClAcqbvzp3ZTLag==',	'4de219b4-fd63-4f9a-b986-18cb5e825c06',NULL,'False','False',NULL,'True',0,'jdoe',NULL,(SELECT DivisionID FROM Division WHERE DivisionTitle = 'Laborbereich'),'John','Doe');" + 
                    "INSERT INTO AspNetUsers VALUES ('1e04bd54-4fb8-4bb8-806c-8ad7b8c90c43','emusterfrau@tim-n.de','False','AOQNOy7qHEN5x2Nh7uXund7MC4y2aCsiPq2mLB/qS62M9so8/okwIfUMj2JtveNqmQ==','36a672c5-a810-46a6-a0ba-5e82d3dfc34b',	NULL,'False','False',NULL,'True',0,'emusterfrau',NULL,(SELECT DivisionID FROM Division WHERE DivisionTitle = 'Laborbereich'),'Erika','Musterfrau');" +
                    "INSERT INTO AspNetUsers VALUES ('bff0f95a-5b1a-42cc-a1cc-8f520477c37a','admin@eule.de','False','AJRpukSrJjBt2OS/KkVBicauJOuUczWa0r1/+qiFCXIjWBqfENU+o1xFFwzWWAi+CA==', 'c1f282a8-2f59-4436-a220-784fb6674c4e',	NULL,'False','False',NULL,'True',0,'Administrator',NULL,(SELECT DivisionID FROM Division WHERE DivisionTitle = 'Laborbereich'),'Admin','Nistrator');" +
                    "UPDATE Division SET DivisionManagerID = '1e04bd54-4fb8-4bb8-806c-8ad7b8c90c43' WHERE DivisionID = 1;" + 
                    "INSERT INTO VacationEntitlement VALUES (15,15,16,'5ac5e880-c123-4ba5-923e-36f91b079b96');" +
                    "INSERT INTO VacationEntitlement VALUES (30,0,19,'1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b');" +
                    "INSERT INTO VacationEntitlement VALUES (30,0,30,'1e04bd54-4fb8-4bb8-806c-8ad7b8c90c43');" +
                    "INSERT INTO ShiftGroup VALUES ('5ac5e880-c123-4ba5-923e-36f91b079b96','1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b');" + 
                    "UPDATE AspNetUsers SET ShiftGroupID = (SELECT ShiftGroupID FROM ShiftGroup WHERE EmployeeID01 = '5ac5e880-c123-4ba5-923e-36f91b079b96' OR EmployeeID02 = '5ac5e880-c123-4ba5-923e-36f91b079b96') WHERE Id = '5ac5e880-c123-4ba5-923e-36f91b079b96';" + 
                    "UPDATE AspNetUsers SET ShiftGroupID = (SELECT ShiftGroupID FROM ShiftGroup WHERE EmployeeID01 = '1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b' OR EmployeeID02 = '1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b') WHERE Id = '1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b';" + 
                    // Vacation Requests for Mustermann
                    "INSERT INTO VacationRequest VALUES (3833965265268765159,'20150608','20150612',getdate(),'Erholungsurlaub','genommen',getdate(),'False','False',5,'5ac5e880-c123-4ba5-923e-36f91b079b96');" +
                    "INSERT INTO VacationRequest VALUES (3833965273000108363,'20150806','20150813',getdate(),'Erholungsurlaub','befürwortet',getdate(),'False','False',6,'5ac5e880-c123-4ba5-923e-36f91b079b96');" +
                    "INSERT INTO VacationRequest VALUES (3833965273109951560,'20151119','20151120',getdate(),'Erholungsurlaub','storniert',getdate(),'False','False',0,'5ac5e880-c123-4ba5-923e-36f91b079b96');" +
                    "INSERT INTO VacationRequest VALUES (3833965273219639029,'20151228','20151230',getdate(),'Erholungsurlaub','zugestimmt',getdate(),'True','False',3,'5ac5e880-c123-4ba5-923e-36f91b079b96');" +
                    // Vacation Requests for Doe
                    "INSERT INTO VacationRequest VALUES (840478949936031979,'20150626','20150702',GETDATE(),'Erholungsurlaub','zugestimmt',GETDATE(),'False','True',5,'1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b');" +
                    "INSERT INTO VacationRequest VALUES (840478950039001939,'20150825','20150827',GETDATE(),'Erholungsurlaub','zugestimmt',GETDATE(),'False','False',3,'1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b');" +
                    "INSERT INTO VacationRequest VALUES (840478950154156460,'20151228','20151230',GETDATE(),'Erholungsurlaub','offen',GETDATE(),'True','False',3,'1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b');" +
  "INSERT INTO Calendar VALUES ('20150101','Donnerstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20150403','Freitag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20150406','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20150501','Freitag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20150514','Donnerstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20150525','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20151003','Samstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20151031','Samstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20151118','Mittwoch','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20151225','Freitag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20151226','Samstag','Feiertag');	" +
                    "INSERT INTO Calendar VALUES ('20160101','Freitag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20160325','Freitag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20160328','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20160501','Sonntag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20160505','Donnerstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20160516','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20161003','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20161031','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20161116','Mittwoch','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20161225','Sonntag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20161226','Montag','Feiertag');	" +
                    "INSERT INTO Calendar VALUES ('20170101','Sonntag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20170414','Freitag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20170417','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20170501','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20170525','Donnerstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20170605','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20171003','Dienstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20171031','Dienstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20171122','Mittwoch','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20171225','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20171226','Dienstag','Feiertag');	" +
                    "INSERT INTO Calendar VALUES ('20180101','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20180330','Freitag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20180402','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20180501','Dienstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20180510','Donnerstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20180521','Montag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20181003','Mittwoch','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20181031','Mittwoch','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20181121','Mittwoch','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20181225','Dienstag','Feiertag');" +
                    "INSERT INTO Calendar VALUES ('20181226','Mittwoch','Feiertag');" +
                    "INSERT INTO VacationLockPeriod VALUES ('20150601', '20150610',1);" +
                    "INSERT INTO AspNetRoles VALUES (4,'Administrator');" +
                    "INSERT INTO AspNetRoles VALUES (3,'Bereichsleiter');" +
                    "INSERT INTO AspNetRoles VALUES (2,'Verwalter');" +
                    "INSERT INTO AspNetRoles VALUES (1,'Mitarbeiter');" +
                    "INSERT INTO AspNetUserRoles values ('1e04bd54-4fb8-4bb8-806c-8ad7b8c90c43',3);" +
                    "INSERT INTO AspNetUserRoles values('1ccd6cbe-6aa3-4b00-9c4f-4ad596191e4b',1);" +
                    "INSERT INTO AspNetUserRoles values('5ac5e880-c123-4ba5-923e-36f91b079b96',1);" +
                    "INSERT INTO AspNetUserRoles values ('bff0f95a-5b1a-42cc-a1cc-8f520477c37a',4);";

                using (SqlCommand cmd = new SqlCommand(sqlStatement, connection))
                {
                    try
                    {
                        connection.Open();
                        cmd.ExecuteNonQuery(); //insert,delete,update is NonQuery
                        Result = true;
                    }
                    catch (SqlException e) //if failure in Database result = false
                    {
                        {
                            Result = false;
                        }
                    }
                }
            }
            return Result;
        }

        private String ConvertVacationRequestProcessingStateToString(VacationRequestProcessingState state) 
        { 
            String result = "";

            switch (state) 
            {
                case VacationRequestProcessingState.submitted: result = SUBMITTED; break;
                case VacationRequestProcessingState.agreed : result = AGREED; break;
                case VacationRequestProcessingState.permitted: result = PERMITTED; break;
                case VacationRequestProcessingState.approved: result = APPROVED; break;
                case VacationRequestProcessingState.rejectedByDeputy: result = REJECTED_BY_DEPUTY; break;
                case VacationRequestProcessingState.rejectedByDivisionManager: result = REJECTED_BY_DIVISION_MANAGER; break;
                case VacationRequestProcessingState.canceled: result = CANCELED; break;
                case VacationRequestProcessingState.taken: result = TAKEN; break;
            }
            return result;
        }

        private VacationRequestProcessingState ConvertStringToVacationRequestProcessingState(String state) 
        {
            VacationRequestProcessingState result = VacationRequestProcessingState.submitted;

            if (state.Equals(AGREED))
            {
                result = VacationRequestProcessingState.agreed;
            }
            else if (state.Equals(APPROVED))
            {
                result = VacationRequestProcessingState.approved;
            }
            else if (state.Equals(CANCELED))
            {
                result = VacationRequestProcessingState.canceled;
            }
            else if (state.Equals(PERMITTED))
            {
                result = VacationRequestProcessingState.permitted;
            }
            else if (state.Equals(REJECTED_BY_DEPUTY)) 
            {
                result = VacationRequestProcessingState.rejectedByDeputy;
            }
            else if (state.Equals(REJECTED_BY_DIVISION_MANAGER))
            {
                result = VacationRequestProcessingState.rejectedByDivisionManager;
            }

            else if (state.Equals(TAKEN)) 
            {
                result = VacationRequestProcessingState.taken;
            }

            return result;
        }

    }
}

