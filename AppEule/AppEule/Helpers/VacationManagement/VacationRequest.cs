//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Web.Mvc;

namespace VacationManagement
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using CommunicationManagement;
    using DatabaseManagement;
//    using GUIManagement;

    public class VacationRequest
    {

        const String DEFAULT_VACATION_TYPE = "Erholungsurlaub";
        

        private ulong _vacationRequestID;
        private DateTime _vacationStartDate;
        private DateTime _vacationEndDate;
        private DateTime _submissionDate;
        private String _vacationType;
        private VacationRequestProcessingState _vacationRequestProcessingState;
        private DateTime _modificationDate;
        private Boolean _vacationPeriodOverlapNote; 
        private Boolean _vacationLockPeriodNote;
        private String _employeeID;
        private int _netVacationDays;

        public ulong getVacationRequestID()
        {
            return _vacationRequestID;
        }

        public DateTime getVacationStartDate()
        {
            return _vacationStartDate;
        }

        // Getter for GUI - New VacationRequest
        public DateTime VacationStartDate
        {
            get { return _vacationStartDate; }
            set { _vacationStartDate = value; }
        }

        public DateTime VacationEndDate
        {
            get { return _vacationEndDate; }
            set { _vacationEndDate = value; }
        }

        public String EmployeeID
        {
            get { return _employeeID; }
            set { _employeeID = value; }
        }

        public DateTime getVacationEndDate()
        {
            return _vacationEndDate;
        }

        public void setVacationPeriodOverlapNote(Boolean value) 
        {
            _vacationPeriodOverlapNote = value;
        }

        public Boolean getVacationPeriodOverlapNote()
        {
            return _vacationPeriodOverlapNote;
        }

        public void setVacationLockPeriodNote(Boolean value)
        {
           _vacationLockPeriodNote = value;
        }

        public Boolean getVacationLockPeriodNote()
        {
            return _vacationLockPeriodNote;
        }

        public String getEmployeeID() 
        {
            return _employeeID;
        }


        public DateTime getSubmissionDate()
        {
            return _submissionDate;
        }

        public String getVacationType()
        {
            return _vacationType;
        }

        public VacationRequestProcessingState getVacationRequestProcessingState()
        {
            return _vacationRequestProcessingState;
        }

        public void setVacationRequestProcessingState(VacationRequestProcessingState VacationRequestProcessingState)
        {
            this._vacationRequestProcessingState = VacationRequestProcessingState;
        }

        public DateTime getModificationDate()
        {
            return _modificationDate;
        }

        public int getNetVacationDays()
        {
            return _netVacationDays;
        }

        public void setNetVacationDays(int count)
        {
            _netVacationDays = count;
        }

       

        /// <summary>
        /// 1. starts the VacationRequestIDGenerator
        /// 2. starts the validation process
        /// </summary>
        /// <returns>"true" if the vacation request is successfully created, else "false" </returns>
        public virtual Boolean InsertIntoDB() 
        {
            //return value
            Boolean result = false;
          
            //this._vacationRequestID = VacationRequestIDGenerator.GenerateID(_employeeID);
            this._vacationRequestID = VacationRequestIDGenerator.GetIDGeneratorInstance.GenerateID(_employeeID);

            //starts the validation process
            result = Validate();

            //result == true, if the employee has enough remaining vacation days
            if (result)
            {
                result = SendDataToDB();
            } 

            if (result)
            {
                //send email
                String text = EmailService.CONFIRMATION_EMAIL_SUBMISSION;  // <- hier kommt der Inhalt der Mail
                EmailService message = new EmailService();
                message.sendMessage(this, text);
            }

            return result;
        }

        /// <summary>
        /// constructor to create a vacation request out of the GUI
        /// </summary>
        public VacationRequest()
        {
            this._employeeID = "";
            this._vacationStartDate = new DateTime(1970, 01, 01);
            this._vacationEndDate = new DateTime(1970, 01, 01);

            //init with default values: 
            this._vacationRequestID = 0;
            this._submissionDate = DateTime.Today;
            this._vacationType = DEFAULT_VACATION_TYPE;
            this._vacationRequestProcessingState = VacationRequestProcessingState.submitted;
            this._modificationDate = DateTime.Now;
            this._vacationPeriodOverlapNote = false; ;
            this._vacationLockPeriodNote = false;
            this._netVacationDays = 0;
        }

        /// <summary>
        /// constructor to create a vacation request 
        /// </summary>
        public VacationRequest(String EmployeeID, DateTime VacationStartDate, DateTime VacationEndDate)
        {
            this._employeeID = EmployeeID;
            this._vacationStartDate = VacationStartDate;
            this._vacationEndDate = VacationEndDate;

            //init with default values: 
            this._vacationRequestID = 0;
            this._submissionDate = DateTime.Today;
            this._vacationType = DEFAULT_VACATION_TYPE;
            this._vacationRequestProcessingState = VacationRequestProcessingState.submitted;
            this._modificationDate = DateTime.Now;
            this._vacationPeriodOverlapNote = false; ;              
            this._vacationLockPeriodNote = false;
            this._netVacationDays = 0;
        }

        /// <summary>
        /// general constructor 
        /// </summary>
        public VacationRequest(ulong VacationRequestID, String EmployeeID, DateTime VacationStartDate, DateTime VacationEndDate, DateTime SubmissionDate, String VacationType, VacationRequestProcessingState VacationRequestProcessingState, DateTime ModificationDate, Boolean VacationPeriodOverlapNote, Boolean VacationLockPeriodNote, int NetVacationDays)
        {
            this._vacationRequestID = VacationRequestID;
            this._employeeID = EmployeeID;
            this._vacationStartDate = VacationStartDate;
            this._vacationEndDate = VacationEndDate;
            this._submissionDate = SubmissionDate;
            this._vacationType = VacationType;
            this._vacationRequestProcessingState = VacationRequestProcessingState;
            this._modificationDate = ModificationDate;
            this._vacationPeriodOverlapNote = VacationPeriodOverlapNote;
            this._vacationLockPeriodNote = VacationLockPeriodNote;
            this._netVacationDays = NetVacationDays;

        }

        
        /// <summary>
        /// Calculates the needed vacation days for the desired holiday period. Weekends and holidays are deducted.
        /// </summary>
        /// <param name="VacationRequest">VacationRequest of the Requester</param>
        /// <returns>number of needed vacation days</returns>
        public static int DetermineWorkingDaysInVacationRequest(VacationRequest VacationRequest) 
        {
            int workingDays = 0;
            int holiDays = 0;
            int netWorkingDays = 0;

            //count weekdays between vacation start day and vacation end day
            int n = 0;
            while (VacationRequest.getVacationStartDate().AddDays(n) <= VacationRequest.getVacationEndDate()) // vacation start day == vacation start day is possible
            {
                if (VacationRequest.getVacationStartDate().AddDays(n).DayOfWeek != DayOfWeek.Saturday && VacationRequest.getVacationStartDate().AddDays(n).DayOfWeek != DayOfWeek.Sunday) //== no weekday
                {
                    workingDays++;
                }
                n++;
            }

            // check if holidays days are in the vacation period
            DBQuery dbq = new DBQuery();
            holiDays = dbq.SelectHolidays(VacationRequest);

            // correct required vacation days
            netWorkingDays = workingDays - holiDays;

            return netWorkingDays;
        }
 
       
        /// <summary>
        ///  starts the VacationRequestValidator
        /// </summary>
        /// <returns>result == true, if the employee has enough remaining vacation days</returns>
        private Boolean Validate()
        {
            Boolean result = false;
            //VacationRequest dummy = new VacationRequest(_employeeID, _vacationStartDate, _vacationEndDate );
            VacationRequestValidator vrValdr = new VacationRequestValidator();
            result = vrValdr.Validate(this);
           
            return result;            
        }

        /// <summary>
        /// 1. writes an information email
        /// 2. writes vacation request in the database
        /// </summary>
        /// <returns>Boolean status if the insert into database was successful</returns>
        private Boolean SendDataToDB()
        {
            Boolean result = false;   
            DBQuery dbq = new DBQuery();           
            result = dbq.InsertNewVacationRequest(this);

            if (result)
            {
                int remainingVacationDays = dbq.SelectRemainingVacationDays(_employeeID) - this._netVacationDays;
                result = dbq.UpdateRemainingVacationDays(_employeeID, remainingVacationDays);
            }
            if (!result) 
            {
                ErrorState.ErrorStateInstance.setError(ErrorState.DATABASE_ERROR);
            }
            return result;
        }
    }
}

